image: registry.gitlab.com/jarvis-network/base/container-images/docker-buildx:20.10
services:
  - name: docker:20.10-dind
    entrypoint: ['env', '-u', 'DOCKER_HOST']
    command: ['dockerd-entrypoint.sh']
variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: '/certs'
  NAMESPACE: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  TAG: mr-${CI_MERGE_REQUEST_ID}
  REGISTRY: $ACR_CORE_URL/jarvis-network/apps/exchange/mono-repo
before_script:
  - docker context create buildx-ctx
  - docker buildx create buildx-ctx --use
  - echo $ACR_CORE_PASSWORD | docker login -u $ACR_CORE_USER --password-stdin $ACR_CORE_URL

.job-config: &job-config
  only:
    - merge_requests
    - dev
    - production
  script:
    - docker buildx bake $TARGET

stages:
  - release
  - base
  - install and build dependencies
  - build libs
  - build and push images
  - deploy
  - delete

# Jobs:

üèó prepare base image:
  <<: *job-config
  stage: base
  variables:
    TARGET: base

üèó prepare install image:
  <<: *job-config
  stage: install and build dependencies
  variables:
    TARGET: install

üèó build libs:
  <<: *job-config
  stage: build libs
  variables:
    TARGET: libs

üê≥ build & push:
  <<: *job-config
  stage: build and push images
  parallel:
    matrix:
      - TARGET: [validator, frontend, frontend-old]
  dependencies:
    - üèó build libs

üíé deploy frontend:
  <<: *job-config
  stage: deploy
  image: $REGISTRY/frontend:${TAG}
  variables:
    NETLIFY_SITE_ID: '$NETLIFY_SITE_ID_NEW'
    GIT_STRATEGY: none
  before_script:
    - npm install -g netlify-cli
  script:
    - ls -la /src
    - netlify deploy --dir /src/out
  dependencies:
    - üê≥ build & push

# --------------------------------- Old Jobs --------------------------------- #

üíé deploy old frontend:
  <<: *job-config
  stage: deploy
  image: $REGISTRY/frontend-old:${TAG}
  variables:
    NETLIFY_SITE_ID: '$NETLIFY_SITE_ID_OLD'
    GIT_STRATEGY: none
  before_script:
    - npm install -g netlify-cli
  script:
    - ls -la /src
    - netlify deploy --dir /src/build
  dependencies:
    - üê≥ build & push

.acr_path:
  - &acr_path_script |
    case "$CI_COMMIT_REF_SLUG" in
      production) ACR_IMAGE_TAG='production';;
      dev) ACR_IMAGE_TAG='dev';;
      *) ACR_IMAGE_TAG="unmerged-$CI_COMMIT_REF_SLUG";;
    esac
    ACR_IMAGE_FULL_NAME="${ACR_URL}/${CI_PROJECT_PATH}:${ACR_IMAGE_TAG}"

build-old-validator:
  <<: *job-config
  image: docker:latest
  stage: install and build dependencies
  before_script:
    - docker info
    - echo "$ACR_CI_PASSWORD" | docker login -u "$ACR_CI_USER" --password-stdin $ACR_URL
    - *acr_path_script
  script:
    - docker build --pull -t "$ACR_IMAGE_FULL_NAME" ./packages/keeper-bot
    - docker push "$ACR_IMAGE_FULL_NAME"

.deploy-keeper-bot-default: &deploy-keeper-bot-default
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  needs:
    - job: build-old-validator
      artifacts: true
  script:
    - *acr_path_script
    - CONTAINER_INSTANCE_NAME="${CI_PROJECT_NAME}-${ACR_IMAGE_TAG}"
    - |
      az login --service-principal \
      -u $CONTAINER_INSTANCE_CI_USER \
      --password $CONTAINER_INSTANCE_CI_PASSWORD \
      --tenant $CONTAINER_INSTANCE_CI_TENANT_ID
    - az container delete -g $CONTAINER_INSTANCE_RESOURCE_GROUP -n $CONTAINER_INSTANCE_NAME -y
    - |
      az container create \
      --resource-group $CONTAINER_INSTANCE_RESOURCE_GROUP \
      --name $CONTAINER_INSTANCE_NAME \
      --image $ACR_IMAGE_FULL_NAME \
      --registry-username $ACR_CI_USER \
      --registry-password $ACR_CI_PASSWORD \
      --environment-variables ETH_FROM=$CI_ETH_FROM RPC_HOST=$CI_RPC_HOST FREQUENCY=$CI_FREQUENCY \
      --secrets key_store="$CI_KEY_STORE" password="$CI_PASSWORD" \
      --secrets-mount-path="$CI_SECRETS_PATH" \
      --command-line "$CI_DOCKER_COMMAND_INPUT" \
      --restart-policy OnFailure \
      --cpu 1 --memory 0.5

.delete-keeper-bot-default: &delete-keeper-bot-default
  image: mcr.microsoft.com/azure-cli
  stage: delete
  needs:
    - job: build-old-validator
      artifacts: true
  script:
    - *acr_path_script
    - CONTAINER_INSTANCE_NAME="${CI_PROJECT_NAME}-${ACR_IMAGE_TAG}"
    - echo TENANT ${CONTAINER_INSTANCE_CI_TENANT_ID}
    - |
      az login --service-principal \
        -u $CONTAINER_INSTANCE_CI_USER \
        --password $CONTAINER_INSTANCE_CI_PASSWORD \
        --tenant $CONTAINER_INSTANCE_CI_TENANT_ID

    - az container delete -g $CONTAINER_INSTANCE_RESOURCE_GROUP -n $CONTAINER_INSTANCE_NAME -y

deploy-azure-stage:
  <<: *deploy-keeper-bot-default
  when: manual
  only:
    - merge_requests
    - dev
    - production

delete-azure:
  <<: *job-config
  <<: *delete-keeper-bot-default
  when: manual

release:
  stage: release
  only:
    refs:
      - master
      - meta-tx-lib
  script:
    - apk add npm git bash
    - npm install multi-semantic-release @semantic-release/gitlab @semantic-release/exec @semantic-release/changelog @semantic-release/git @semantic-release/npm @semantic-release/release-notes-generator @semantic-release/commit-analyzer
    - npx semantic-release -t "v\${version}-rc"
