/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface FinancialProductLibrary extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FinancialProductLibrary;
  clone(): FinancialProductLibrary;
  methods: {
    transformPrice(
      oraclePrice: [number | string],
      requestTime: number | string
    ): NonPayableTransactionObject<[string]>;

    transformCollateralRequirement(
      oraclePrice: [number | string],
      collateralRequirement: [number | string]
    ): NonPayableTransactionObject<[string]>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    transformPriceIdentifier(
      priceIdentifier: string | number[],
      requestTime: number | string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
