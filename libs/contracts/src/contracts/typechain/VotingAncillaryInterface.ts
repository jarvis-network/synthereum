/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface VotingAncillaryInterface extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): VotingAncillaryInterface;
  clone(): VotingAncillaryInterface;
  methods: {
    batchCommit(
      commits: [
        string | number[],
        number | string | BN,
        string | number[],
        string | number[],
        string | number[],
      ][],
    ): NonPayableTransactionObject<void>;

    batchReveal(
      reveals: [
        string | number[],
        number | string | BN,
        number | string | BN,
        string | number[],
        number | string | BN,
      ][],
    ): NonPayableTransactionObject<void>;

    commitAndEmitEncryptedVote(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      hash: string | number[],
      encryptedVote: string | number[],
    ): NonPayableTransactionObject<void>;

    commitVote(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      hash: string | number[],
    ): NonPayableTransactionObject<void>;

    getCurrentRoundId(): NonPayableTransactionObject<string>;

    getPendingRequests(): NonPayableTransactionObject<
      [string, string, string][]
    >;

    getVotePhase(): NonPayableTransactionObject<string>;

    retrieveRewards(
      voterAddress: string,
      roundId: number | string | BN,
      toRetrieve: [
        string | number[],
        number | string | BN,
        string | number[],
      ][],
    ): NonPayableTransactionObject<[string]>;

    revealVote(
      identifier: string | number[],
      time: number | string | BN,
      price: number | string | BN,
      ancillaryData: string | number[],
      salt: number | string | BN,
    ): NonPayableTransactionObject<void>;

    setGatPercentage(
      newGatPercentage: [number | string | BN],
    ): NonPayableTransactionObject<void>;

    setInflationRate(
      newInflationRate: [number | string | BN],
    ): NonPayableTransactionObject<void>;

    setMigrated(newVotingAddress: string): NonPayableTransactionObject<void>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: number | string | BN,
    ): NonPayableTransactionObject<void>;

    snapshotCurrentRound(
      signature: string | number[],
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
