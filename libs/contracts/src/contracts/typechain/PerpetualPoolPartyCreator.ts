/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CreatedPerpetual = ContractEventLog<{
  perpetualAddress: string;
  deployerAddress: string;
  0: string;
  1: string;
}>;

export interface PerpetualPoolPartyCreator extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): PerpetualPoolPartyCreator;
  clone(): PerpetualPoolPartyCreator;
  methods: {
    createPerpetual(
      params: [
        string,
        string | number[],
        string,
        string,
        string,
        [number | string | BN],
        [number | string | BN],
        [number | string | BN],
        [number | string | BN],
        [number | string | BN],
        number | string | BN,
        number | string | BN,
        string,
        string[],
        string[],
      ],
    ): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    setCurrentTime(
      time: number | string | BN,
    ): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    tokenFactoryAddress(): NonPayableTransactionObject<string>;
  };
  events: {
    CreatedPerpetual(cb?: Callback<CreatedPerpetual>): EventEmitter;
    CreatedPerpetual(
      options?: EventOptions,
      cb?: Callback<CreatedPerpetual>,
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'CreatedPerpetual', cb: Callback<CreatedPerpetual>): void;
  once(
    event: 'CreatedPerpetual',
    options: EventOptions,
    cb: Callback<CreatedPerpetual>,
  ): void;
}
