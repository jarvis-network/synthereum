/* File autogenerated by synthereum-lib. Do not edit manually. */

import type { Tagged } from '@jarvis-network/web3-utils/base/tagged-type';

export type KnownContract =
  | Tagged<AccessControl, 'AccessControl'>
  | Tagged<AddressWhitelist, 'AddressWhitelist'>
  | Tagged<AdministrateeInterface, 'AdministrateeInterface'>
  | Tagged<ContractCreator, 'ContractCreator'>
  | Tagged<ERC20, 'ERC20'>
  | Tagged<ExpandedERC20, 'ExpandedERC20'>
  | Tagged<ExpandedIERC20, 'ExpandedIERC20'>
  | Tagged<ExpiringMultiParty, 'ExpiringMultiParty'>
  | Tagged<ExpiringMultiPartyCreator, 'ExpiringMultiPartyCreator'>
  | Tagged<FeePayer, 'FeePayer'>
  | Tagged<FinderInterface, 'FinderInterface'>
  | Tagged<HitchensUnorderedKeySet, 'HitchensUnorderedKeySet'>
  | Tagged<IERC20, 'IERC20'>
  | Tagged<IExpiringMultiParty, 'IExpiringMultiParty'>
  | Tagged<IdentifierWhitelistInterface, 'IdentifierWhitelistInterface'>
  | Tagged<Liquidatable, 'Liquidatable'>
  | Tagged<Migrations, 'Migrations'>
  | Tagged<MultiRole, 'MultiRole'>
  | Tagged<OracleInterface, 'OracleInterface'>
  | Tagged<OracleInterfaces, 'OracleInterfaces'>
  | Tagged<Ownable, 'Ownable'>
  | Tagged<PricelessPositionManager, 'PricelessPositionManager'>
  | Tagged<Registry, 'Registry'>
  | Tagged<RegistryInterface, 'RegistryInterface'>
  | Tagged<StoreInterface, 'StoreInterface'>
  | Tagged<SyntheticToken, 'SyntheticToken'>
  | Tagged<TIC, 'TIC'>
  | Tagged<TICFactory, 'TICFactory'>
  | Tagged<TICInterface, 'TICInterface'>
  | Tagged<Testable, 'Testable'>
  | Tagged<Timer, 'Timer'>
  | Tagged<TokenFactory, 'TokenFactory'>;

import type { AccessControl } from './AccessControl';
export type { AccessControl };
import type {
  RoleAdminChanged as AccessControl_RoleAdminChanged,
  RoleGranted as AccessControl_RoleGranted,
  RoleRevoked as AccessControl_RoleRevoked,
} from './AccessControl';
export namespace AccessControl_Events {
  export type RoleAdminChanged = AccessControl_RoleAdminChanged;
  export type RoleGranted = AccessControl_RoleGranted;
  export type RoleRevoked = AccessControl_RoleRevoked;
}

import type { AddressWhitelist } from './AddressWhitelist';
export type { AddressWhitelist };
import type {
  AddedToWhitelist as AddressWhitelist_AddedToWhitelist,
  OwnershipTransferred as AddressWhitelist_OwnershipTransferred,
  RemovedFromWhitelist as AddressWhitelist_RemovedFromWhitelist,
} from './AddressWhitelist';
export namespace AddressWhitelist_Events {
  export type AddedToWhitelist = AddressWhitelist_AddedToWhitelist;
  export type OwnershipTransferred = AddressWhitelist_OwnershipTransferred;
  export type RemovedFromWhitelist = AddressWhitelist_RemovedFromWhitelist;
}

import type { AdministrateeInterface } from './AdministrateeInterface';
export type { AdministrateeInterface };

import type { ContractCreator } from './ContractCreator';
export type { ContractCreator };

import type { ERC20 } from './ERC20';
export type { ERC20 };
import type {
  Approval as ERC20_Approval,
  Transfer as ERC20_Transfer,
} from './ERC20';
export namespace ERC20_Events {
  export type Approval = ERC20_Approval;
  export type Transfer = ERC20_Transfer;
}

import type { ExpandedERC20 } from './ExpandedERC20';
export type { ExpandedERC20 };
import type {
  AddedSharedMember as ExpandedERC20_AddedSharedMember,
  Approval as ExpandedERC20_Approval,
  RemovedSharedMember as ExpandedERC20_RemovedSharedMember,
  ResetExclusiveMember as ExpandedERC20_ResetExclusiveMember,
  Transfer as ExpandedERC20_Transfer,
} from './ExpandedERC20';
export namespace ExpandedERC20_Events {
  export type AddedSharedMember = ExpandedERC20_AddedSharedMember;
  export type Approval = ExpandedERC20_Approval;
  export type RemovedSharedMember = ExpandedERC20_RemovedSharedMember;
  export type ResetExclusiveMember = ExpandedERC20_ResetExclusiveMember;
  export type Transfer = ExpandedERC20_Transfer;
}

import type { ExpandedIERC20 } from './ExpandedIERC20';
export type { ExpandedIERC20 };
import type {
  Approval as ExpandedIERC20_Approval,
  Transfer as ExpandedIERC20_Transfer,
} from './ExpandedIERC20';
export namespace ExpandedIERC20_Events {
  export type Approval = ExpandedIERC20_Approval;
  export type Transfer = ExpandedIERC20_Transfer;
}

import type { ExpiringMultiParty } from './ExpiringMultiParty';
export type { ExpiringMultiParty };
import type {
  ContractExpired as ExpiringMultiParty_ContractExpired,
  Deposit as ExpiringMultiParty_Deposit,
  DisputeSettled as ExpiringMultiParty_DisputeSettled,
  EmergencyShutdown as ExpiringMultiParty_EmergencyShutdown,
  EndedSponsorPosition as ExpiringMultiParty_EndedSponsorPosition,
  FinalFeesPaid as ExpiringMultiParty_FinalFeesPaid,
  LiquidationCreated as ExpiringMultiParty_LiquidationCreated,
  LiquidationDisputed as ExpiringMultiParty_LiquidationDisputed,
  LiquidationWithdrawn as ExpiringMultiParty_LiquidationWithdrawn,
  NewSponsor as ExpiringMultiParty_NewSponsor,
  PositionCreated as ExpiringMultiParty_PositionCreated,
  Redeem as ExpiringMultiParty_Redeem,
  RegularFeesPaid as ExpiringMultiParty_RegularFeesPaid,
  RequestTransferPosition as ExpiringMultiParty_RequestTransferPosition,
  RequestTransferPositionCanceled as ExpiringMultiParty_RequestTransferPositionCanceled,
  RequestTransferPositionExecuted as ExpiringMultiParty_RequestTransferPositionExecuted,
  RequestWithdrawal as ExpiringMultiParty_RequestWithdrawal,
  RequestWithdrawalCanceled as ExpiringMultiParty_RequestWithdrawalCanceled,
  RequestWithdrawalExecuted as ExpiringMultiParty_RequestWithdrawalExecuted,
  SettleExpiredPosition as ExpiringMultiParty_SettleExpiredPosition,
  Withdrawal as ExpiringMultiParty_Withdrawal,
} from './ExpiringMultiParty';
export namespace ExpiringMultiParty_Events {
  export type ContractExpired = ExpiringMultiParty_ContractExpired;
  export type Deposit = ExpiringMultiParty_Deposit;
  export type DisputeSettled = ExpiringMultiParty_DisputeSettled;
  export type EmergencyShutdown = ExpiringMultiParty_EmergencyShutdown;
  export type EndedSponsorPosition = ExpiringMultiParty_EndedSponsorPosition;
  export type FinalFeesPaid = ExpiringMultiParty_FinalFeesPaid;
  export type LiquidationCreated = ExpiringMultiParty_LiquidationCreated;
  export type LiquidationDisputed = ExpiringMultiParty_LiquidationDisputed;
  export type LiquidationWithdrawn = ExpiringMultiParty_LiquidationWithdrawn;
  export type NewSponsor = ExpiringMultiParty_NewSponsor;
  export type PositionCreated = ExpiringMultiParty_PositionCreated;
  export type Redeem = ExpiringMultiParty_Redeem;
  export type RegularFeesPaid = ExpiringMultiParty_RegularFeesPaid;
  export type RequestTransferPosition = ExpiringMultiParty_RequestTransferPosition;
  export type RequestTransferPositionCanceled = ExpiringMultiParty_RequestTransferPositionCanceled;
  export type RequestTransferPositionExecuted = ExpiringMultiParty_RequestTransferPositionExecuted;
  export type RequestWithdrawal = ExpiringMultiParty_RequestWithdrawal;
  export type RequestWithdrawalCanceled = ExpiringMultiParty_RequestWithdrawalCanceled;
  export type RequestWithdrawalExecuted = ExpiringMultiParty_RequestWithdrawalExecuted;
  export type SettleExpiredPosition = ExpiringMultiParty_SettleExpiredPosition;
  export type Withdrawal = ExpiringMultiParty_Withdrawal;
}

import type { ExpiringMultiPartyCreator } from './ExpiringMultiPartyCreator';
export type { ExpiringMultiPartyCreator };
import type { CreatedExpiringMultiParty as ExpiringMultiPartyCreator_CreatedExpiringMultiParty } from './ExpiringMultiPartyCreator';
export namespace ExpiringMultiPartyCreator_Events {
  export type CreatedExpiringMultiParty = ExpiringMultiPartyCreator_CreatedExpiringMultiParty;
}

import type { FeePayer } from './FeePayer';
export type { FeePayer };
import type {
  FinalFeesPaid as FeePayer_FinalFeesPaid,
  RegularFeesPaid as FeePayer_RegularFeesPaid,
} from './FeePayer';
export namespace FeePayer_Events {
  export type FinalFeesPaid = FeePayer_FinalFeesPaid;
  export type RegularFeesPaid = FeePayer_RegularFeesPaid;
}

import type { FinderInterface } from './FinderInterface';
export type { FinderInterface };

import type { HitchensUnorderedKeySet } from './HitchensUnorderedKeySet';
export type { HitchensUnorderedKeySet };
import type { LogUpdate as HitchensUnorderedKeySet_LogUpdate } from './HitchensUnorderedKeySet';
export namespace HitchensUnorderedKeySet_Events {
  export type LogUpdate = HitchensUnorderedKeySet_LogUpdate;
}

import type { IERC20 } from './IERC20';
export type { IERC20 };
import type {
  Approval as IERC20_Approval,
  Transfer as IERC20_Transfer,
} from './IERC20';
export namespace IERC20_Events {
  export type Approval = IERC20_Approval;
  export type Transfer = IERC20_Transfer;
}

import type { IExpiringMultiParty } from './IExpiringMultiParty';
export type { IExpiringMultiParty };

import type { IdentifierWhitelistInterface } from './IdentifierWhitelistInterface';
export type { IdentifierWhitelistInterface };

import type { Liquidatable } from './Liquidatable';
export type { Liquidatable };
import type {
  ContractExpired as Liquidatable_ContractExpired,
  Deposit as Liquidatable_Deposit,
  DisputeSettled as Liquidatable_DisputeSettled,
  EmergencyShutdown as Liquidatable_EmergencyShutdown,
  EndedSponsorPosition as Liquidatable_EndedSponsorPosition,
  FinalFeesPaid as Liquidatable_FinalFeesPaid,
  LiquidationCreated as Liquidatable_LiquidationCreated,
  LiquidationDisputed as Liquidatable_LiquidationDisputed,
  LiquidationWithdrawn as Liquidatable_LiquidationWithdrawn,
  NewSponsor as Liquidatable_NewSponsor,
  PositionCreated as Liquidatable_PositionCreated,
  Redeem as Liquidatable_Redeem,
  RegularFeesPaid as Liquidatable_RegularFeesPaid,
  RequestTransferPosition as Liquidatable_RequestTransferPosition,
  RequestTransferPositionCanceled as Liquidatable_RequestTransferPositionCanceled,
  RequestTransferPositionExecuted as Liquidatable_RequestTransferPositionExecuted,
  RequestWithdrawal as Liquidatable_RequestWithdrawal,
  RequestWithdrawalCanceled as Liquidatable_RequestWithdrawalCanceled,
  RequestWithdrawalExecuted as Liquidatable_RequestWithdrawalExecuted,
  SettleExpiredPosition as Liquidatable_SettleExpiredPosition,
  Withdrawal as Liquidatable_Withdrawal,
} from './Liquidatable';
export namespace Liquidatable_Events {
  export type ContractExpired = Liquidatable_ContractExpired;
  export type Deposit = Liquidatable_Deposit;
  export type DisputeSettled = Liquidatable_DisputeSettled;
  export type EmergencyShutdown = Liquidatable_EmergencyShutdown;
  export type EndedSponsorPosition = Liquidatable_EndedSponsorPosition;
  export type FinalFeesPaid = Liquidatable_FinalFeesPaid;
  export type LiquidationCreated = Liquidatable_LiquidationCreated;
  export type LiquidationDisputed = Liquidatable_LiquidationDisputed;
  export type LiquidationWithdrawn = Liquidatable_LiquidationWithdrawn;
  export type NewSponsor = Liquidatable_NewSponsor;
  export type PositionCreated = Liquidatable_PositionCreated;
  export type Redeem = Liquidatable_Redeem;
  export type RegularFeesPaid = Liquidatable_RegularFeesPaid;
  export type RequestTransferPosition = Liquidatable_RequestTransferPosition;
  export type RequestTransferPositionCanceled = Liquidatable_RequestTransferPositionCanceled;
  export type RequestTransferPositionExecuted = Liquidatable_RequestTransferPositionExecuted;
  export type RequestWithdrawal = Liquidatable_RequestWithdrawal;
  export type RequestWithdrawalCanceled = Liquidatable_RequestWithdrawalCanceled;
  export type RequestWithdrawalExecuted = Liquidatable_RequestWithdrawalExecuted;
  export type SettleExpiredPosition = Liquidatable_SettleExpiredPosition;
  export type Withdrawal = Liquidatable_Withdrawal;
}

import type { Migrations } from './Migrations';
export type { Migrations };

import type { MultiRole } from './MultiRole';
export type { MultiRole };
import type {
  AddedSharedMember as MultiRole_AddedSharedMember,
  RemovedSharedMember as MultiRole_RemovedSharedMember,
  ResetExclusiveMember as MultiRole_ResetExclusiveMember,
} from './MultiRole';
export namespace MultiRole_Events {
  export type AddedSharedMember = MultiRole_AddedSharedMember;
  export type RemovedSharedMember = MultiRole_RemovedSharedMember;
  export type ResetExclusiveMember = MultiRole_ResetExclusiveMember;
}

import type { OracleInterface } from './OracleInterface';
export type { OracleInterface };

import type { OracleInterfaces } from './OracleInterfaces';
export type { OracleInterfaces };

import type { Ownable } from './Ownable';
export type { Ownable };
import type { OwnershipTransferred as Ownable_OwnershipTransferred } from './Ownable';
export namespace Ownable_Events {
  export type OwnershipTransferred = Ownable_OwnershipTransferred;
}

import type { PricelessPositionManager } from './PricelessPositionManager';
export type { PricelessPositionManager };
import type {
  ContractExpired as PricelessPositionManager_ContractExpired,
  Deposit as PricelessPositionManager_Deposit,
  EmergencyShutdown as PricelessPositionManager_EmergencyShutdown,
  EndedSponsorPosition as PricelessPositionManager_EndedSponsorPosition,
  FinalFeesPaid as PricelessPositionManager_FinalFeesPaid,
  NewSponsor as PricelessPositionManager_NewSponsor,
  PositionCreated as PricelessPositionManager_PositionCreated,
  Redeem as PricelessPositionManager_Redeem,
  RegularFeesPaid as PricelessPositionManager_RegularFeesPaid,
  RequestTransferPosition as PricelessPositionManager_RequestTransferPosition,
  RequestTransferPositionCanceled as PricelessPositionManager_RequestTransferPositionCanceled,
  RequestTransferPositionExecuted as PricelessPositionManager_RequestTransferPositionExecuted,
  RequestWithdrawal as PricelessPositionManager_RequestWithdrawal,
  RequestWithdrawalCanceled as PricelessPositionManager_RequestWithdrawalCanceled,
  RequestWithdrawalExecuted as PricelessPositionManager_RequestWithdrawalExecuted,
  SettleExpiredPosition as PricelessPositionManager_SettleExpiredPosition,
  Withdrawal as PricelessPositionManager_Withdrawal,
} from './PricelessPositionManager';
export namespace PricelessPositionManager_Events {
  export type ContractExpired = PricelessPositionManager_ContractExpired;
  export type Deposit = PricelessPositionManager_Deposit;
  export type EmergencyShutdown = PricelessPositionManager_EmergencyShutdown;
  export type EndedSponsorPosition = PricelessPositionManager_EndedSponsorPosition;
  export type FinalFeesPaid = PricelessPositionManager_FinalFeesPaid;
  export type NewSponsor = PricelessPositionManager_NewSponsor;
  export type PositionCreated = PricelessPositionManager_PositionCreated;
  export type Redeem = PricelessPositionManager_Redeem;
  export type RegularFeesPaid = PricelessPositionManager_RegularFeesPaid;
  export type RequestTransferPosition = PricelessPositionManager_RequestTransferPosition;
  export type RequestTransferPositionCanceled = PricelessPositionManager_RequestTransferPositionCanceled;
  export type RequestTransferPositionExecuted = PricelessPositionManager_RequestTransferPositionExecuted;
  export type RequestWithdrawal = PricelessPositionManager_RequestWithdrawal;
  export type RequestWithdrawalCanceled = PricelessPositionManager_RequestWithdrawalCanceled;
  export type RequestWithdrawalExecuted = PricelessPositionManager_RequestWithdrawalExecuted;
  export type SettleExpiredPosition = PricelessPositionManager_SettleExpiredPosition;
  export type Withdrawal = PricelessPositionManager_Withdrawal;
}

import type { Registry } from './Registry';
export type { Registry };
import type {
  AddedSharedMember as Registry_AddedSharedMember,
  NewContractRegistered as Registry_NewContractRegistered,
  PartyAdded as Registry_PartyAdded,
  PartyRemoved as Registry_PartyRemoved,
  RemovedSharedMember as Registry_RemovedSharedMember,
  ResetExclusiveMember as Registry_ResetExclusiveMember,
} from './Registry';
export namespace Registry_Events {
  export type AddedSharedMember = Registry_AddedSharedMember;
  export type NewContractRegistered = Registry_NewContractRegistered;
  export type PartyAdded = Registry_PartyAdded;
  export type PartyRemoved = Registry_PartyRemoved;
  export type RemovedSharedMember = Registry_RemovedSharedMember;
  export type ResetExclusiveMember = Registry_ResetExclusiveMember;
}

import type { RegistryInterface } from './RegistryInterface';
export type { RegistryInterface };

import type { StoreInterface } from './StoreInterface';
export type { StoreInterface };

import type { SyntheticToken } from './SyntheticToken';
export type { SyntheticToken };
import type {
  AddedSharedMember as SyntheticToken_AddedSharedMember,
  Approval as SyntheticToken_Approval,
  RemovedSharedMember as SyntheticToken_RemovedSharedMember,
  ResetExclusiveMember as SyntheticToken_ResetExclusiveMember,
  Transfer as SyntheticToken_Transfer,
} from './SyntheticToken';
export namespace SyntheticToken_Events {
  export type AddedSharedMember = SyntheticToken_AddedSharedMember;
  export type Approval = SyntheticToken_Approval;
  export type RemovedSharedMember = SyntheticToken_RemovedSharedMember;
  export type ResetExclusiveMember = SyntheticToken_ResetExclusiveMember;
  export type Transfer = SyntheticToken_Transfer;
}

import type { TIC } from './TIC';
export type { TIC };
import type {
  ExchangeApproved as TIC_ExchangeApproved,
  ExchangeRejected as TIC_ExchangeRejected,
  ExchangeRequested as TIC_ExchangeRequested,
  MintApproved as TIC_MintApproved,
  MintRejected as TIC_MintRejected,
  MintRequested as TIC_MintRequested,
  RedeemApproved as TIC_RedeemApproved,
  RedeemRejected as TIC_RedeemRejected,
  RedeemRequested as TIC_RedeemRequested,
  RoleAdminChanged as TIC_RoleAdminChanged,
  RoleGranted as TIC_RoleGranted,
  RoleRevoked as TIC_RoleRevoked,
  SetFeePercentage as TIC_SetFeePercentage,
  SetFeeRecipients as TIC_SetFeeRecipients,
} from './TIC';
export namespace TIC_Events {
  export type ExchangeApproved = TIC_ExchangeApproved;
  export type ExchangeRejected = TIC_ExchangeRejected;
  export type ExchangeRequested = TIC_ExchangeRequested;
  export type MintApproved = TIC_MintApproved;
  export type MintRejected = TIC_MintRejected;
  export type MintRequested = TIC_MintRequested;
  export type RedeemApproved = TIC_RedeemApproved;
  export type RedeemRejected = TIC_RedeemRejected;
  export type RedeemRequested = TIC_RedeemRequested;
  export type RoleAdminChanged = TIC_RoleAdminChanged;
  export type RoleGranted = TIC_RoleGranted;
  export type RoleRevoked = TIC_RoleRevoked;
  export type SetFeePercentage = TIC_SetFeePercentage;
  export type SetFeeRecipients = TIC_SetFeeRecipients;
}

import type { TICFactory } from './TICFactory';
export type { TICFactory };
import type {
  RoleAdminChanged as TICFactory_RoleAdminChanged,
  RoleGranted as TICFactory_RoleGranted,
  RoleRevoked as TICFactory_RoleRevoked,
} from './TICFactory';
export namespace TICFactory_Events {
  export type RoleAdminChanged = TICFactory_RoleAdminChanged;
  export type RoleGranted = TICFactory_RoleGranted;
  export type RoleRevoked = TICFactory_RoleRevoked;
}

import type { TICInterface } from './TICInterface';
export type { TICInterface };

import type { Testable } from './Testable';
export type { Testable };

import type { Timer } from './Timer';
export type { Timer };

import type { TokenFactory } from './TokenFactory';
export type { TokenFactory };

export type {
  Callback,
  ContractEventLog,
  ContractEventEmitter,
  NonPayableTx,
  PayableTx,
  NonPayableTransactionObject,
  PayableTransactionObject,
  BlockType,
  BaseContract,
} from './types';
