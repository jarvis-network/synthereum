/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ISynthereumChainlinkPriceFeed extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ISynthereumChainlinkPriceFeed;
  clone(): ISynthereumChainlinkPriceFeed;
  methods: {
    /**
     * Get last chainlink oracle price for a given price identifier
     * @param priceIdentifier Price feed identifier
     */
    getLatestPrice(
      priceIdentifier: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Set the address of aggregator associated to a pricee identifier
     * @param aggregator Address of chainlink proxy aggregator
     * @param priceIdentifier Price feed identifier
     */
    setAggregator(
      priceIdentifier: string | number[],
      aggregator: string
    ): NonPayableTransactionObject<void>;

    /**
     * Remove the address of aggregator associated to a price identifier
     * @param priceIdentifier Price feed identifier
     */
    removeAggregator(
      priceIdentifier: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Returns the address of aggregator if exists, otherwise it reverts
     * @param priceIdentifier Price feed identifier
     */
    getAggregator(
      priceIdentifier: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Get last chainlink oracle data for a given price identifier
     * @param priceIdentifier Price feed identifier
     */
    getOracleLatestData(
      priceIdentifier: string | number[]
    ): NonPayableTransactionObject<
      [string, string, string, string, string, string]
    >;

    /**
     * Get chainlink oracle price in a given round for a given price identifier
     * @param _roundId Round Id
     * @param priceIdentifier Price feed identifier
     */
    getRoundPrice(
      priceIdentifier: string | number[],
      _roundId: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * Get chainlink oracle data in a given round for a given price identifier
     * @param _roundId Round Id
     * @param priceIdentifier Price feed identifier
     */
    getOracleRoundData(
      priceIdentifier: string | number[],
      _roundId: number | string
    ): NonPayableTransactionObject<
      [string, string, string, string, string, string]
    >;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
