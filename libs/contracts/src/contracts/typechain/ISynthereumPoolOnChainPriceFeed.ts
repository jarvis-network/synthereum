/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ISynthereumPoolOnChainPriceFeed extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): ISynthereumPoolOnChainPriceFeed;
  clone(): ISynthereumPoolOnChainPriceFeed;
  methods: {
    addDerivative(derivative: string): NonPayableTransactionObject<void>;

    addRoleInDerivative(
      derivative: string,
      derivativeRole: number | string | BN,
      addressToAdd: string,
    ): NonPayableTransactionObject<void>;

    addRoleInSynthToken(
      derivative: string,
      synthTokenRole: number | string | BN,
      addressToAdd: string,
    ): NonPayableTransactionObject<void>;

    calculateFee(
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<string>;

    collateralToken(): NonPayableTransactionObject<string>;

    depositIntoDerivative(
      derivative: string,
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<void>;

    emergencyShutdown(derivative: string): NonPayableTransactionObject<void>;

    exchange(
      exchangeParams: [
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ],
    ): NonPayableTransactionObject<{
      destNumTokensMinted: string;
      feePaid: string;
      0: string;
      1: string;
    }>;

    exchangeMint(
      srcDerivative: string,
      derivative: string,
      collateralAmount: number | string | BN,
      numTokens: number | string | BN,
    ): NonPayableTransactionObject<void>;

    fastWithdraw(
      derivative: string,
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<string>;

    getAllDerivatives(): NonPayableTransactionObject<string[]>;

    getFeeInfo(): NonPayableTransactionObject<[[string], string[], string[]]>;

    getPriceFeedIdentifier(): NonPayableTransactionObject<string>;

    getStartingCollateralization(): NonPayableTransactionObject<string>;

    isContractAllowed(): NonPayableTransactionObject<boolean>;

    isDerivativeAdmitted(
      derivative: string,
    ): NonPayableTransactionObject<boolean>;

    mint(
      mintParams: [
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ],
    ): NonPayableTransactionObject<{
      syntheticTokensMinted: string;
      feePaid: string;
      0: string;
      1: string;
    }>;

    redeem(
      redeemParams: [
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ],
    ): NonPayableTransactionObject<{
      collateralRedeemed: string;
      feePaid: string;
      0: string;
      1: string;
    }>;

    removeDerivative(derivative: string): NonPayableTransactionObject<void>;

    renounceRoleInDerivative(
      derivative: string,
      derivativeRole: number | string | BN,
    ): NonPayableTransactionObject<void>;

    setFee(
      _fee: [[number | string | BN], string[], (number | string | BN)[]],
    ): NonPayableTransactionObject<void>;

    setFeePercentage(
      _feePercentage: number | string | BN,
    ): NonPayableTransactionObject<void>;

    setFeeRecipients(
      _feeRecipients: string[],
      _feeProportions: (number | string | BN)[],
    ): NonPayableTransactionObject<void>;

    setIsContractAllowed(
      isContractAllowed: boolean,
    ): NonPayableTransactionObject<void>;

    setStartingCollateralization(
      startingCollateralRatio: number | string | BN,
    ): NonPayableTransactionObject<void>;

    settleEmergencyShutdown(
      derivative: string,
    ): NonPayableTransactionObject<string>;

    slowWithdrawPassedRequest(
      derivative: string,
    ): NonPayableTransactionObject<string>;

    slowWithdrawRequest(
      derivative: string,
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<void>;

    synthereumFinder(): NonPayableTransactionObject<string>;

    syntheticToken(): NonPayableTransactionObject<string>;

    syntheticTokenSymbol(): NonPayableTransactionObject<string>;

    version(): NonPayableTransactionObject<string>;

    withdrawFromPool(
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
