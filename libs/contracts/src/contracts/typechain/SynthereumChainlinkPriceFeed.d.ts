/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type RemoveAggregator = ContractEventLog<{
  priceIdentifier: string;
  0: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetAggregator = ContractEventLog<{
  priceIdentifier: string;
  aggregator: string;
  0: string;
  1: string;
}>;

export interface SynthereumChainlinkPriceFeed extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SynthereumChainlinkPriceFeed;
  clone(): SynthereumChainlinkPriceFeed;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    MAINTAINER_ROLE(): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    synthereumFinder(): NonPayableTransactionObject<string>;

    /**
     * Set the address of aggregator associated to a pricee identifier
     * @param aggregator Address of chainlink proxy aggregator
     * @param priceIdentifier Price feed identifier
     */
    setAggregator(
      priceIdentifier: string | number[],
      aggregator: string
    ): NonPayableTransactionObject<void>;

    /**
     * Remove the address of aggregator associated to a price identifier
     * @param priceIdentifier Price feed identifier
     */
    removeAggregator(
      priceIdentifier: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Get last chainlink oracle price for a given price identifier
     * @param priceIdentifier Price feed identifier
     */
    getLatestPrice(
      priceIdentifier: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Get last chainlink oracle data for a given price identifier
     * @param priceIdentifier Price feed identifier
     */
    getOracleLatestData(
      priceIdentifier: string | number[]
    ): NonPayableTransactionObject<
      [string, string, string, string, string, string]
    >;

    /**
     * Get chainlink oracle price in a given round for a given price identifier
     * @param _roundId Round Id
     * @param priceIdentifier Price feed identifier
     */
    getRoundPrice(
      priceIdentifier: string | number[],
      _roundId: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * Get chainlink oracle data in a given round for a given price identifier
     * @param _roundId Round Id
     * @param priceIdentifier Price feed identifier
     */
    getOracleRoundData(
      priceIdentifier: string | number[],
      _roundId: number | string
    ): NonPayableTransactionObject<
      [string, string, string, string, string, string]
    >;

    /**
     * Returns the address of aggregator if exists, otherwise it reverts
     * @param priceIdentifier Price feed identifier
     */
    getAggregator(
      priceIdentifier: string | number[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    RemoveAggregator(cb?: Callback<RemoveAggregator>): EventEmitter;
    RemoveAggregator(
      options?: EventOptions,
      cb?: Callback<RemoveAggregator>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    SetAggregator(cb?: Callback<SetAggregator>): EventEmitter;
    SetAggregator(
      options?: EventOptions,
      cb?: Callback<SetAggregator>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "RemoveAggregator", cb: Callback<RemoveAggregator>): void;
  once(
    event: "RemoveAggregator",
    options: EventOptions,
    cb: Callback<RemoveAggregator>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "SetAggregator", cb: Callback<SetAggregator>): void;
  once(
    event: "SetAggregator",
    options: EventOptions,
    cb: Callback<SetAggregator>
  ): void;
}
