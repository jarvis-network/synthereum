/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type EmergencyShutdown = ContractEventLog<{
  caller: string;
  shutdownTimestamp: string;
  0: string;
  1: string;
}>;
export type EndedSponsorPosition = ContractEventLog<{
  sponsor: string;
  0: string;
}>;
export type FinalFeesPaid = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type NewSponsor = ContractEventLog<{
  sponsor: string;
  0: string;
}>;
export type PositionCreated = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Redeem = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RegularFeesPaid = ContractEventLog<{
  regularFee: string;
  lateFee: string;
  0: string;
  1: string;
}>;
export type Repay = ContractEventLog<{
  sponsor: string;
  numTokensRepaid: string;
  newTokenCount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RequestWithdrawal = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawalCanceled = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawalExecuted = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type SettleEmergencyShutdown = ContractEventLog<{
  caller: string;
  collateralReturned: string;
  tokensBurned: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdrawal = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;

export interface PerpetualPositionManagerPoolParty extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PerpetualPositionManagerPoolParty;
  clone(): PerpetualPositionManagerPoolParty;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    POOL_ROLE(): NonPayableTransactionObject<string>;

    collateralCurrency(): NonPayableTransactionObject<string>;

    feePayerData(): NonPayableTransactionObject<{
      collateralCurrency: string;
      finder: string;
      lastPaymentTime: string;
      cumulativeFeeMultiplier: [string];
      0: string;
      1: string;
      2: string;
      3: [string];
    }>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    globalPositionData(): NonPayableTransactionObject<{
      totalTokensOutstanding: [string];
      rawTotalPositionCollateral: [string];
      0: [string];
      1: [string];
    }>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    payFinalFees(
      payer: string,
      amount: [number | string]
    ): NonPayableTransactionObject<void>;

    payRegularFees(): NonPayableTransactionObject<[string]>;

    pfc(): NonPayableTransactionObject<[string]>;

    positionManagerData(): NonPayableTransactionObject<{
      tokenCurrency: string;
      priceIdentifier: string;
      withdrawalLiveness: string;
      minSponsorTokens: [string];
      emergencyShutdownPrice: [string];
      emergencyShutdownTimestamp: string;
      excessTokenBeneficiary: string;
      0: string;
      1: string;
      2: string;
      3: [string];
      4: [string];
      5: string;
      6: string;
    }>;

    positions(
      arg0: string
    ): NonPayableTransactionObject<{
      tokensOutstanding: [string];
      withdrawalRequestPassTimestamp: string;
      withdrawalRequestAmount: [string];
      rawCollateral: [string];
      0: [string];
      1: string;
      2: [string];
      3: [string];
    }>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    setCurrentTime(time: number | string): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    depositTo(
      sponsor: string,
      collateralAmount: [number | string]
    ): NonPayableTransactionObject<void>;

    deposit(
      collateralAmount: [number | string]
    ): NonPayableTransactionObject<void>;

    withdraw(
      collateralAmount: [number | string]
    ): NonPayableTransactionObject<[string]>;

    requestWithdrawal(
      collateralAmount: [number | string]
    ): NonPayableTransactionObject<void>;

    withdrawPassedRequest(): NonPayableTransactionObject<[string]>;

    cancelWithdrawal(): NonPayableTransactionObject<void>;

    create(
      collateralAmount: [number | string],
      numTokens: [number | string]
    ): NonPayableTransactionObject<void>;

    redeem(numTokens: [number | string]): NonPayableTransactionObject<[string]>;

    repay(numTokens: [number | string]): NonPayableTransactionObject<void>;

    settleEmergencyShutdown(): NonPayableTransactionObject<[string]>;

    emergencyShutdown(): NonPayableTransactionObject<void>;

    remargin(): NonPayableTransactionObject<void>;

    trimExcess(token: string): NonPayableTransactionObject<[string]>;

    deleteSponsorPosition(sponsor: string): NonPayableTransactionObject<void>;

    addPool(pool: string): NonPayableTransactionObject<void>;

    addAdmin(admin: string): NonPayableTransactionObject<void>;

    addAdminAndPool(adminAndPool: string): NonPayableTransactionObject<void>;

    renouncePool(): NonPayableTransactionObject<void>;

    renounceAdmin(): NonPayableTransactionObject<void>;

    renounceAdminAndPool(): NonPayableTransactionObject<void>;

    addSyntheticTokenMinter(
      derivative: string
    ): NonPayableTransactionObject<void>;

    addSyntheticTokenBurner(
      derivative: string
    ): NonPayableTransactionObject<void>;

    addSyntheticTokenAdmin(
      derivative: string
    ): NonPayableTransactionObject<void>;

    addSyntheticTokenAdminAndMinterAndBurner(
      derivative: string
    ): NonPayableTransactionObject<void>;

    renounceSyntheticTokenMinter(): NonPayableTransactionObject<void>;

    renounceSyntheticTokenBurner(): NonPayableTransactionObject<void>;

    renounceSyntheticTokenAdmin(): NonPayableTransactionObject<void>;

    renounceSyntheticTokenAdminAndMinterAndBurner(): NonPayableTransactionObject<void>;

    getCollateral(sponsor: string): NonPayableTransactionObject<[string]>;

    tokenCurrency(): NonPayableTransactionObject<string>;

    totalPositionCollateral(): NonPayableTransactionObject<[string]>;

    emergencyShutdownPrice(): NonPayableTransactionObject<[string]>;

    getAdminMembers(): NonPayableTransactionObject<string[]>;

    getPoolMembers(): NonPayableTransactionObject<string[]>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyShutdown(cb?: Callback<EmergencyShutdown>): EventEmitter;
    EmergencyShutdown(
      options?: EventOptions,
      cb?: Callback<EmergencyShutdown>
    ): EventEmitter;

    EndedSponsorPosition(cb?: Callback<EndedSponsorPosition>): EventEmitter;
    EndedSponsorPosition(
      options?: EventOptions,
      cb?: Callback<EndedSponsorPosition>
    ): EventEmitter;

    FinalFeesPaid(cb?: Callback<FinalFeesPaid>): EventEmitter;
    FinalFeesPaid(
      options?: EventOptions,
      cb?: Callback<FinalFeesPaid>
    ): EventEmitter;

    NewSponsor(cb?: Callback<NewSponsor>): EventEmitter;
    NewSponsor(options?: EventOptions, cb?: Callback<NewSponsor>): EventEmitter;

    PositionCreated(cb?: Callback<PositionCreated>): EventEmitter;
    PositionCreated(
      options?: EventOptions,
      cb?: Callback<PositionCreated>
    ): EventEmitter;

    Redeem(cb?: Callback<Redeem>): EventEmitter;
    Redeem(options?: EventOptions, cb?: Callback<Redeem>): EventEmitter;

    RegularFeesPaid(cb?: Callback<RegularFeesPaid>): EventEmitter;
    RegularFeesPaid(
      options?: EventOptions,
      cb?: Callback<RegularFeesPaid>
    ): EventEmitter;

    Repay(cb?: Callback<Repay>): EventEmitter;
    Repay(options?: EventOptions, cb?: Callback<Repay>): EventEmitter;

    RequestWithdrawal(cb?: Callback<RequestWithdrawal>): EventEmitter;
    RequestWithdrawal(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawal>
    ): EventEmitter;

    RequestWithdrawalCanceled(
      cb?: Callback<RequestWithdrawalCanceled>
    ): EventEmitter;
    RequestWithdrawalCanceled(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawalCanceled>
    ): EventEmitter;

    RequestWithdrawalExecuted(
      cb?: Callback<RequestWithdrawalExecuted>
    ): EventEmitter;
    RequestWithdrawalExecuted(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawalExecuted>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    SettleEmergencyShutdown(
      cb?: Callback<SettleEmergencyShutdown>
    ): EventEmitter;
    SettleEmergencyShutdown(
      options?: EventOptions,
      cb?: Callback<SettleEmergencyShutdown>
    ): EventEmitter;

    Withdrawal(cb?: Callback<Withdrawal>): EventEmitter;
    Withdrawal(options?: EventOptions, cb?: Callback<Withdrawal>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "EmergencyShutdown", cb: Callback<EmergencyShutdown>): void;
  once(
    event: "EmergencyShutdown",
    options: EventOptions,
    cb: Callback<EmergencyShutdown>
  ): void;

  once(event: "EndedSponsorPosition", cb: Callback<EndedSponsorPosition>): void;
  once(
    event: "EndedSponsorPosition",
    options: EventOptions,
    cb: Callback<EndedSponsorPosition>
  ): void;

  once(event: "FinalFeesPaid", cb: Callback<FinalFeesPaid>): void;
  once(
    event: "FinalFeesPaid",
    options: EventOptions,
    cb: Callback<FinalFeesPaid>
  ): void;

  once(event: "NewSponsor", cb: Callback<NewSponsor>): void;
  once(
    event: "NewSponsor",
    options: EventOptions,
    cb: Callback<NewSponsor>
  ): void;

  once(event: "PositionCreated", cb: Callback<PositionCreated>): void;
  once(
    event: "PositionCreated",
    options: EventOptions,
    cb: Callback<PositionCreated>
  ): void;

  once(event: "Redeem", cb: Callback<Redeem>): void;
  once(event: "Redeem", options: EventOptions, cb: Callback<Redeem>): void;

  once(event: "RegularFeesPaid", cb: Callback<RegularFeesPaid>): void;
  once(
    event: "RegularFeesPaid",
    options: EventOptions,
    cb: Callback<RegularFeesPaid>
  ): void;

  once(event: "Repay", cb: Callback<Repay>): void;
  once(event: "Repay", options: EventOptions, cb: Callback<Repay>): void;

  once(event: "RequestWithdrawal", cb: Callback<RequestWithdrawal>): void;
  once(
    event: "RequestWithdrawal",
    options: EventOptions,
    cb: Callback<RequestWithdrawal>
  ): void;

  once(
    event: "RequestWithdrawalCanceled",
    cb: Callback<RequestWithdrawalCanceled>
  ): void;
  once(
    event: "RequestWithdrawalCanceled",
    options: EventOptions,
    cb: Callback<RequestWithdrawalCanceled>
  ): void;

  once(
    event: "RequestWithdrawalExecuted",
    cb: Callback<RequestWithdrawalExecuted>
  ): void;
  once(
    event: "RequestWithdrawalExecuted",
    options: EventOptions,
    cb: Callback<RequestWithdrawalExecuted>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(
    event: "SettleEmergencyShutdown",
    cb: Callback<SettleEmergencyShutdown>
  ): void;
  once(
    event: "SettleEmergencyShutdown",
    options: EventOptions,
    cb: Callback<SettleEmergencyShutdown>
  ): void;

  once(event: "Withdrawal", cb: Callback<Withdrawal>): void;
  once(
    event: "Withdrawal",
    options: EventOptions,
    cb: Callback<Withdrawal>
  ): void;
}
