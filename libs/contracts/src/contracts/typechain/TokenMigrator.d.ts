/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface TokenMigrator extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TokenMigrator;
  clone(): TokenMigrator;
  methods: {
    hasMigrated(arg0: string): NonPayableTransactionObject<boolean>;

    newToken(): NonPayableTransactionObject<string>;

    oldToken(): NonPayableTransactionObject<string>;

    rate(): NonPayableTransactionObject<string>;

    snapshotId(): NonPayableTransactionObject<string>;

    /**
     * This function can only be called once per `tokenHolder`. Anyone can call this method on behalf of any other token holder since there is no disadvantage to receiving the tokens earlier.
     * Migrates the tokenHolder's old tokens to new tokens.
     * @param tokenHolder address of the token holder to migrate.
     */
    migrateTokens(tokenHolder: string): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
