/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ExchangeApproved = ContractEventLog<{
  exchangeID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type ExchangeRejected = ContractEventLog<{
  exchangeID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type ExchangeRequested = ContractEventLog<{
  exchangeID: string;
  timestamp: string;
  sender: string;
  destTIC: string;
  numTokens: string;
  destNumTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type MintApproved = ContractEventLog<{
  mintID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type MintRejected = ContractEventLog<{
  mintID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type MintRequested = ContractEventLog<{
  mintID: string;
  timestamp: string;
  sender: string;
  collateralAmount: string;
  numTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RedeemApproved = ContractEventLog<{
  redeemID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type RedeemRejected = ContractEventLog<{
  redeemID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type RedeemRequested = ContractEventLog<{
  redeemID: string;
  timestamp: string;
  sender: string;
  collateralAmount: string;
  numTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetFeePercentage = ContractEventLog<{
  feePercentage: string;
  0: string;
}>;
export type SetFeeRecipients = ContractEventLog<{
  feeRecipients: string[];
  feeProportions: string[];
  0: string[];
  1: string[];
}>;

export interface SynthereumTIC extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SynthereumTIC;
  clone(): SynthereumTIC;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    LIQUIDITY_PROVIDER_ROLE(): NonPayableTransactionObject<string>;

    MAINTAINER_ROLE(): NonPayableTransactionObject<string>;

    VALIDATOR_ROLE(): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    mintRequest(
      collateralAmount: number | string,
      numTokens: number | string
    ): NonPayableTransactionObject<void>;

    approveMint(mintID: string | number[]): NonPayableTransactionObject<void>;

    rejectMint(mintID: string | number[]): NonPayableTransactionObject<void>;

    deposit(
      collateralAmount: number | string
    ): NonPayableTransactionObject<void>;

    withdraw(
      collateralAmount: number | string
    ): NonPayableTransactionObject<void>;

    exchangeMint(
      collateralAmount: number | string,
      numTokens: number | string
    ): NonPayableTransactionObject<void>;

    depositIntoDerivative(
      collateralAmount: number | string
    ): NonPayableTransactionObject<void>;

    withdrawRequest(
      collateralAmount: number | string
    ): NonPayableTransactionObject<void>;

    withdrawPassedRequest(): NonPayableTransactionObject<void>;

    redeemRequest(
      collateralAmount: number | string,
      numTokens: number | string
    ): NonPayableTransactionObject<void>;

    approveRedeem(
      redeemID: string | number[]
    ): NonPayableTransactionObject<void>;

    rejectRedeem(
      redeemID: string | number[]
    ): NonPayableTransactionObject<void>;

    emergencyShutdown(): NonPayableTransactionObject<void>;

    settleEmergencyShutdown(): NonPayableTransactionObject<void>;

    exchangeRequest(
      destTIC: string,
      numTokens: number | string,
      collateralAmount: number | string,
      destNumTokens: number | string
    ): NonPayableTransactionObject<void>;

    approveExchange(
      exchangeID: string | number[]
    ): NonPayableTransactionObject<void>;

    rejectExchange(
      exchangeID: string | number[]
    ): NonPayableTransactionObject<void>;

    synthereumFinder(): NonPayableTransactionObject<string>;

    version(): NonPayableTransactionObject<string>;

    derivative(): NonPayableTransactionObject<string>;

    collateralToken(): NonPayableTransactionObject<string>;

    syntheticToken(): NonPayableTransactionObject<string>;

    syntheticTokenSymbol(): NonPayableTransactionObject<string>;

    calculateFee(
      collateralAmount: number | string
    ): NonPayableTransactionObject<string>;

    getMintRequests(): NonPayableTransactionObject<
      [string, string, string, [string], [string]][]
    >;

    getRedeemRequests(): NonPayableTransactionObject<
      [string, string, string, [string], [string]][]
    >;

    getExchangeRequests(): NonPayableTransactionObject<
      [string, string, string, string, [string], [string], [string]][]
    >;

    setFee(
      _fee: [[number | string], string[], (number | string)[]]
    ): NonPayableTransactionObject<void>;

    setFeePercentage(
      _feePercentage: number | string
    ): NonPayableTransactionObject<void>;

    setFeeRecipients(
      _feeRecipients: string[],
      _feeProportions: (number | string)[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ExchangeApproved(cb?: Callback<ExchangeApproved>): EventEmitter;
    ExchangeApproved(
      options?: EventOptions,
      cb?: Callback<ExchangeApproved>
    ): EventEmitter;

    ExchangeRejected(cb?: Callback<ExchangeRejected>): EventEmitter;
    ExchangeRejected(
      options?: EventOptions,
      cb?: Callback<ExchangeRejected>
    ): EventEmitter;

    ExchangeRequested(cb?: Callback<ExchangeRequested>): EventEmitter;
    ExchangeRequested(
      options?: EventOptions,
      cb?: Callback<ExchangeRequested>
    ): EventEmitter;

    MintApproved(cb?: Callback<MintApproved>): EventEmitter;
    MintApproved(
      options?: EventOptions,
      cb?: Callback<MintApproved>
    ): EventEmitter;

    MintRejected(cb?: Callback<MintRejected>): EventEmitter;
    MintRejected(
      options?: EventOptions,
      cb?: Callback<MintRejected>
    ): EventEmitter;

    MintRequested(cb?: Callback<MintRequested>): EventEmitter;
    MintRequested(
      options?: EventOptions,
      cb?: Callback<MintRequested>
    ): EventEmitter;

    RedeemApproved(cb?: Callback<RedeemApproved>): EventEmitter;
    RedeemApproved(
      options?: EventOptions,
      cb?: Callback<RedeemApproved>
    ): EventEmitter;

    RedeemRejected(cb?: Callback<RedeemRejected>): EventEmitter;
    RedeemRejected(
      options?: EventOptions,
      cb?: Callback<RedeemRejected>
    ): EventEmitter;

    RedeemRequested(cb?: Callback<RedeemRequested>): EventEmitter;
    RedeemRequested(
      options?: EventOptions,
      cb?: Callback<RedeemRequested>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    SetFeePercentage(cb?: Callback<SetFeePercentage>): EventEmitter;
    SetFeePercentage(
      options?: EventOptions,
      cb?: Callback<SetFeePercentage>
    ): EventEmitter;

    SetFeeRecipients(cb?: Callback<SetFeeRecipients>): EventEmitter;
    SetFeeRecipients(
      options?: EventOptions,
      cb?: Callback<SetFeeRecipients>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ExchangeApproved", cb: Callback<ExchangeApproved>): void;
  once(
    event: "ExchangeApproved",
    options: EventOptions,
    cb: Callback<ExchangeApproved>
  ): void;

  once(event: "ExchangeRejected", cb: Callback<ExchangeRejected>): void;
  once(
    event: "ExchangeRejected",
    options: EventOptions,
    cb: Callback<ExchangeRejected>
  ): void;

  once(event: "ExchangeRequested", cb: Callback<ExchangeRequested>): void;
  once(
    event: "ExchangeRequested",
    options: EventOptions,
    cb: Callback<ExchangeRequested>
  ): void;

  once(event: "MintApproved", cb: Callback<MintApproved>): void;
  once(
    event: "MintApproved",
    options: EventOptions,
    cb: Callback<MintApproved>
  ): void;

  once(event: "MintRejected", cb: Callback<MintRejected>): void;
  once(
    event: "MintRejected",
    options: EventOptions,
    cb: Callback<MintRejected>
  ): void;

  once(event: "MintRequested", cb: Callback<MintRequested>): void;
  once(
    event: "MintRequested",
    options: EventOptions,
    cb: Callback<MintRequested>
  ): void;

  once(event: "RedeemApproved", cb: Callback<RedeemApproved>): void;
  once(
    event: "RedeemApproved",
    options: EventOptions,
    cb: Callback<RedeemApproved>
  ): void;

  once(event: "RedeemRejected", cb: Callback<RedeemRejected>): void;
  once(
    event: "RedeemRejected",
    options: EventOptions,
    cb: Callback<RedeemRejected>
  ): void;

  once(event: "RedeemRequested", cb: Callback<RedeemRequested>): void;
  once(
    event: "RedeemRequested",
    options: EventOptions,
    cb: Callback<RedeemRequested>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "SetFeePercentage", cb: Callback<SetFeePercentage>): void;
  once(
    event: "SetFeePercentage",
    options: EventOptions,
    cb: Callback<SetFeePercentage>
  ): void;

  once(event: "SetFeeRecipients", cb: Callback<SetFeeRecipients>): void;
  once(
    event: "SetFeeRecipients",
    options: EventOptions,
    cb: Callback<SetFeeRecipients>
  ): void;
}
