/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ExchangeApproved = ContractEventLog<{
  exchangeID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type ExchangeRejected = ContractEventLog<{
  exchangeID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type ExchangeRequested = ContractEventLog<{
  exchangeID: string;
  timestamp: string;
  sender: string;
  destTIC: string;
  numTokens: string;
  destNumTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type MintApproved = ContractEventLog<{
  mintID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type MintRejected = ContractEventLog<{
  mintID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type MintRequested = ContractEventLog<{
  mintID: string;
  timestamp: string;
  sender: string;
  collateralAmount: string;
  numTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RedeemApproved = ContractEventLog<{
  redeemID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type RedeemRejected = ContractEventLog<{
  redeemID: string;
  sender: string;
  0: string;
  1: string;
}>;
export type RedeemRequested = ContractEventLog<{
  redeemID: string;
  timestamp: string;
  sender: string;
  collateralAmount: string;
  numTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetFeePercentage = ContractEventLog<{
  feePercentage: string;
  0: string;
}>;
export type SetFeeRecipients = ContractEventLog<{
  feeRecipients: string[];
  feeProportions: string[];
  0: string[];
  1: string[];
}>;

export interface SynthereumTIC extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SynthereumTIC;
  clone(): SynthereumTIC;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    LIQUIDITY_PROVIDER_ROLE(): NonPayableTransactionObject<string>;

    MAINTAINER_ROLE(): NonPayableTransactionObject<string>;

    VALIDATOR_ROLE(): NonPayableTransactionObject<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: string | number[],
      index: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * Submit a request to mint tokensThe request needs to approved by the LP before tokens are created. This is         necessary to prevent users from abusing LPs by minting large amounts of tokens         with little collateral.User must approve collateral transfer for the mint request to succeed
     * @param collateralAmount The amount of collateral supplied
     * @param numTokens The number of tokens the user wants to mint
     */
    mintRequest(
      collateralAmount: number | string,
      numTokens: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Approve a mint request as an LPThis will typically be done with a keeper botUser needs to have approved the transfer of collateral tokens
     * @param mintID The ID of the mint request
     */
    approveMint(mintID: string | number[]): NonPayableTransactionObject<void>;

    /**
     * Reject a mint request as an LPThis will typically be done with a keeper bot
     * @param mintID The ID of the mint request
     */
    rejectMint(mintID: string | number[]): NonPayableTransactionObject<void>;

    /**
     * Liquidity provider supplies margin to the TIC to collateralize user deposits
     * @param collateralAmount The amount of margin supplied
     */
    deposit(
      collateralAmount: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Liquidity provider withdraw margin from the TIC
     * @param collateralAmount The amount of margin to withdraw
     */
    withdraw(
      collateralAmount: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * This function could be called by any account to mint tokens, however they will lose      their excess collateral to the liquidity provider when they redeem the tokens.
     * TODO: Potentially restrict this function to only TICs registered on a whitelistCalled by a source TIC's `exchange` function to mint destination tokens
     * @param collateralAmount The amount of collateral to use from the source TIC
     * @param numTokens The number of new tokens to mint
     */
    exchangeMint(
      collateralAmount: number | string,
      numTokens: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Move collateral from TIC to its derivative in order to increase GCR
     * @param collateralAmount The amount of collateral to move into derivative
     */
    depositIntoDerivative(
      collateralAmount: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Start a withdrawal requestCollateral can be withdrawn once the liveness period has elapsed
     * @param collateralAmount The amount of short margin to withdraw
     */
    withdrawRequest(
      collateralAmount: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Withdraw collateral after a withdraw request has passed it's liveness period
     */
    withdrawPassedRequest(): NonPayableTransactionObject<void>;

    /**
     * Submit a request to redeem tokensThe request needs to approved by the LP before tokens are created. This is         necessary to prevent users from abusing LPs by redeeming large amounts of collateral         from a small number of tokens.User must approve synthetic token transfer for the redeem request to succeed
     * @param collateralAmount The amount of collateral to redeem tokens for
     * @param numTokens The number of tokens to redeem
     */
    redeemRequest(
      collateralAmount: number | string,
      numTokens: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Approve a redeem request as an LPThis will typically be done with a keeper botUser needs to have approved the transfer of synthetic tokens
     * @param redeemID The ID of the redeem request
     */
    approveRedeem(
      redeemID: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Reject a redeem request as an LPThis will typically be done with a keeper bot
     * @param redeemID The ID of the redeem request
     */
    rejectRedeem(
      redeemID: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Activate emergency shutdown on a derivative in order to liquidate the token holders in case of emergency
     */
    emergencyShutdown(): NonPayableTransactionObject<void>;

    /**
     * Redeem tokens after contract emergency shutdownAfter derivative shutdown, an LP should use this instead of `withdrawRequest` to         retrieve their collateral.
     */
    settleEmergencyShutdown(): NonPayableTransactionObject<void>;

    /**
     * The number of destination tokens needs to be calculated relative to the value of the      source tokens and the destination's collateral ratio. If too many destination tokens      are requested the transaction will fail.
     * Submit a request to perform an atomic of tokens between TICs
     * @param collateralAmount Collateral amount equivalent to numTokens and destNumTokens
     * @param destNumTokens The number of destination tokens the swap attempts to procure
     * @param destTIC The destination TIC
     * @param numTokens The number of source tokens to swap
     */
    exchangeRequest(
      destTIC: string,
      numTokens: number | string,
      collateralAmount: number | string,
      destNumTokens: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Approve an exchange requestThis will typically be done with a keeper botUser needs to have approved the transfer of synthetic tokens
     * @param exchangeID The ID of the exchange request
     */
    approveExchange(
      exchangeID: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Reject an exchange requestThis will typically be done with a keeper bot
     * @param exchangeID The ID of the exchange request
     */
    rejectExchange(
      exchangeID: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Get Synthereum finder of the pool
     */
    synthereumFinder(): NonPayableTransactionObject<string>;

    /**
     * Get Synthereum version
     */
    version(): NonPayableTransactionObject<string>;

    /**
     * Get the derivative contract
     */
    derivative(): NonPayableTransactionObject<string>;

    /**
     * Get the collateral token
     */
    collateralToken(): NonPayableTransactionObject<string>;

    /**
     * Get the synthetic token from the derivative contract
     */
    syntheticToken(): NonPayableTransactionObject<string>;

    /**
     * Get the synthetic token symbol associated to this pool
     */
    syntheticTokenSymbol(): NonPayableTransactionObject<string>;

    /**
     * Calculate the fees a user will have to pay to mint tokens with their collateral
     */
    calculateFee(
      collateralAmount: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * Get all open mint requests
     */
    getMintRequests(): NonPayableTransactionObject<
      [string, string, string, [string], [string]][]
    >;

    /**
     * Get all open redeem requests
     */
    getRedeemRequests(): NonPayableTransactionObject<
      [string, string, string, [string], [string]][]
    >;

    /**
     * Get all open exchange requests
     */
    getExchangeRequests(): NonPayableTransactionObject<
      [string, string, string, string, [string], [string], [string]][]
    >;

    setFee(
      _fee: [[number | string], string[], (number | string)[]]
    ): NonPayableTransactionObject<void>;

    /**
     * Update the fee percentage
     * @param _feePercentage The new fee percentage
     */
    setFeePercentage(
      _feePercentage: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Update the percentage of the fee
     * @param _feeProportions The percentage of new fee
     * @param _feeRecipients The percentage of new fee
     */
    setFeeRecipients(
      _feeRecipients: string[],
      _feeProportions: (number | string)[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ExchangeApproved(cb?: Callback<ExchangeApproved>): EventEmitter;
    ExchangeApproved(
      options?: EventOptions,
      cb?: Callback<ExchangeApproved>
    ): EventEmitter;

    ExchangeRejected(cb?: Callback<ExchangeRejected>): EventEmitter;
    ExchangeRejected(
      options?: EventOptions,
      cb?: Callback<ExchangeRejected>
    ): EventEmitter;

    ExchangeRequested(cb?: Callback<ExchangeRequested>): EventEmitter;
    ExchangeRequested(
      options?: EventOptions,
      cb?: Callback<ExchangeRequested>
    ): EventEmitter;

    MintApproved(cb?: Callback<MintApproved>): EventEmitter;
    MintApproved(
      options?: EventOptions,
      cb?: Callback<MintApproved>
    ): EventEmitter;

    MintRejected(cb?: Callback<MintRejected>): EventEmitter;
    MintRejected(
      options?: EventOptions,
      cb?: Callback<MintRejected>
    ): EventEmitter;

    MintRequested(cb?: Callback<MintRequested>): EventEmitter;
    MintRequested(
      options?: EventOptions,
      cb?: Callback<MintRequested>
    ): EventEmitter;

    RedeemApproved(cb?: Callback<RedeemApproved>): EventEmitter;
    RedeemApproved(
      options?: EventOptions,
      cb?: Callback<RedeemApproved>
    ): EventEmitter;

    RedeemRejected(cb?: Callback<RedeemRejected>): EventEmitter;
    RedeemRejected(
      options?: EventOptions,
      cb?: Callback<RedeemRejected>
    ): EventEmitter;

    RedeemRequested(cb?: Callback<RedeemRequested>): EventEmitter;
    RedeemRequested(
      options?: EventOptions,
      cb?: Callback<RedeemRequested>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    SetFeePercentage(cb?: Callback<SetFeePercentage>): EventEmitter;
    SetFeePercentage(
      options?: EventOptions,
      cb?: Callback<SetFeePercentage>
    ): EventEmitter;

    SetFeeRecipients(cb?: Callback<SetFeeRecipients>): EventEmitter;
    SetFeeRecipients(
      options?: EventOptions,
      cb?: Callback<SetFeeRecipients>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ExchangeApproved", cb: Callback<ExchangeApproved>): void;
  once(
    event: "ExchangeApproved",
    options: EventOptions,
    cb: Callback<ExchangeApproved>
  ): void;

  once(event: "ExchangeRejected", cb: Callback<ExchangeRejected>): void;
  once(
    event: "ExchangeRejected",
    options: EventOptions,
    cb: Callback<ExchangeRejected>
  ): void;

  once(event: "ExchangeRequested", cb: Callback<ExchangeRequested>): void;
  once(
    event: "ExchangeRequested",
    options: EventOptions,
    cb: Callback<ExchangeRequested>
  ): void;

  once(event: "MintApproved", cb: Callback<MintApproved>): void;
  once(
    event: "MintApproved",
    options: EventOptions,
    cb: Callback<MintApproved>
  ): void;

  once(event: "MintRejected", cb: Callback<MintRejected>): void;
  once(
    event: "MintRejected",
    options: EventOptions,
    cb: Callback<MintRejected>
  ): void;

  once(event: "MintRequested", cb: Callback<MintRequested>): void;
  once(
    event: "MintRequested",
    options: EventOptions,
    cb: Callback<MintRequested>
  ): void;

  once(event: "RedeemApproved", cb: Callback<RedeemApproved>): void;
  once(
    event: "RedeemApproved",
    options: EventOptions,
    cb: Callback<RedeemApproved>
  ): void;

  once(event: "RedeemRejected", cb: Callback<RedeemRejected>): void;
  once(
    event: "RedeemRejected",
    options: EventOptions,
    cb: Callback<RedeemRejected>
  ): void;

  once(event: "RedeemRequested", cb: Callback<RedeemRequested>): void;
  once(
    event: "RedeemRequested",
    options: EventOptions,
    cb: Callback<RedeemRequested>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "SetFeePercentage", cb: Callback<SetFeePercentage>): void;
  once(
    event: "SetFeePercentage",
    options: EventOptions,
    cb: Callback<SetFeePercentage>
  ): void;

  once(event: "SetFeeRecipients", cb: Callback<SetFeeRecipients>): void;
  once(
    event: "SetFeeRecipients",
    options: EventOptions,
    cb: Callback<SetFeeRecipients>
  ): void;
}
