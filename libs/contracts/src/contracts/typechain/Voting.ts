/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type EncryptedVote = ContractEventLog<{
  voter: string;
  roundId: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  encryptedVote: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PriceRequestAdded = ContractEventLog<{
  roundId: string;
  identifier: string;
  time: string;
  0: string;
  1: string;
  2: string;
}>;
export type PriceResolved = ContractEventLog<{
  roundId: string;
  identifier: string;
  time: string;
  price: string;
  ancillaryData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RewardsRetrieved = ContractEventLog<{
  voter: string;
  roundId: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  numTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type VoteCommitted = ContractEventLog<{
  voter: string;
  roundId: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type VoteRevealed = ContractEventLog<{
  voter: string;
  roundId: string;
  identifier: string;
  time: string;
  price: string;
  ancillaryData: string;
  numTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;

export interface Voting extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): Voting;
  clone(): Voting;
  methods: {
    ancillaryBytesLimit(): NonPayableTransactionObject<string>;

    'batchCommit(tuple[])'(
      commits: [
        string | number[],
        number | string | BN,
        string | number[],
        string | number[],
        string | number[],
      ][],
    ): NonPayableTransactionObject<void>;

    'batchCommit(tuple[])'(
      commits: [
        string | number[],
        number | string | BN,
        string | number[],
        string | number[],
      ][],
    ): NonPayableTransactionObject<void>;

    'batchReveal(tuple[])'(
      reveals: [
        string | number[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ][],
    ): NonPayableTransactionObject<void>;

    'batchReveal(tuple[])'(
      reveals: [
        string | number[],
        number | string | BN,
        number | string | BN,
        string | number[],
        number | string | BN,
      ][],
    ): NonPayableTransactionObject<void>;

    'commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)'(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      hash: string | number[],
      encryptedVote: string | number[],
    ): NonPayableTransactionObject<void>;

    'commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)'(
      identifier: string | number[],
      time: number | string | BN,
      hash: string | number[],
      encryptedVote: string | number[],
    ): NonPayableTransactionObject<void>;

    'commitVote(bytes32,uint256,bytes,bytes32)'(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      hash: string | number[],
    ): NonPayableTransactionObject<void>;

    'commitVote(bytes32,uint256,bytes32)'(
      identifier: string | number[],
      time: number | string | BN,
      hash: string | number[],
    ): NonPayableTransactionObject<void>;

    gatPercentage(): NonPayableTransactionObject<string>;

    getCurrentRoundId(): NonPayableTransactionObject<string>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getPendingRequests(): NonPayableTransactionObject<
      [string, string, string][]
    >;

    'getPrice(bytes32,uint256,bytes)'(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
    ): NonPayableTransactionObject<string>;

    'getPrice(bytes32,uint256)'(
      identifier: string | number[],
      time: number | string | BN,
    ): NonPayableTransactionObject<string>;

    'getPriceRequestStatuses(tuple[])'(
      requests: [string | number[], number | string | BN, string | number[]][],
    ): NonPayableTransactionObject<[string, string][]>;

    'getPriceRequestStatuses(tuple[])'(
      requests: [string | number[], number | string | BN][],
    ): NonPayableTransactionObject<[string, string][]>;

    getVotePhase(): NonPayableTransactionObject<string>;

    'hasPrice(bytes32,uint256)'(
      identifier: string | number[],
      time: number | string | BN,
    ): NonPayableTransactionObject<boolean>;

    'hasPrice(bytes32,uint256,bytes)'(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
    ): NonPayableTransactionObject<boolean>;

    inflationRate(): NonPayableTransactionObject<string>;

    migratedAddress(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    'requestPrice(bytes32,uint256,bytes)'(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
    ): NonPayableTransactionObject<void>;

    'requestPrice(bytes32,uint256)'(
      identifier: string | number[],
      time: number | string | BN,
    ): NonPayableTransactionObject<void>;

    'retrieveRewards(address,uint256,tuple[])'(
      voterAddress: string,
      roundId: number | string | BN,
      toRetrieve: [
        string | number[],
        number | string | BN,
        string | number[],
      ][],
    ): NonPayableTransactionObject<[string]>;

    'retrieveRewards(address,uint256,tuple[])'(
      voterAddress: string,
      roundId: number | string | BN,
      toRetrieve: [string | number[], number | string | BN][],
    ): NonPayableTransactionObject<[string]>;

    'revealVote(bytes32,uint256,int256,int256)'(
      identifier: string | number[],
      time: number | string | BN,
      price: number | string | BN,
      salt: number | string | BN,
    ): NonPayableTransactionObject<void>;

    'revealVote(bytes32,uint256,int256,bytes,int256)'(
      identifier: string | number[],
      time: number | string | BN,
      price: number | string | BN,
      ancillaryData: string | number[],
      salt: number | string | BN,
    ): NonPayableTransactionObject<void>;

    rewardsExpirationTimeout(): NonPayableTransactionObject<string>;

    rounds(
      arg0: number | string | BN,
    ): NonPayableTransactionObject<{
      snapshotId: string;
      inflationRate: [string];
      gatPercentage: [string];
      rewardsExpirationTime: string;
      0: string;
      1: [string];
      2: [string];
      3: string;
    }>;

    setCurrentTime(
      time: number | string | BN,
    ): NonPayableTransactionObject<void>;

    setGatPercentage(
      newGatPercentage: [number | string | BN],
    ): NonPayableTransactionObject<void>;

    setInflationRate(
      newInflationRate: [number | string | BN],
    ): NonPayableTransactionObject<void>;

    setMigrated(newVotingAddress: string): NonPayableTransactionObject<void>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: number | string | BN,
    ): NonPayableTransactionObject<void>;

    snapshotCurrentRound(
      signature: string | number[],
    ): NonPayableTransactionObject<void>;

    snapshotMessageHash(): NonPayableTransactionObject<string>;

    timerAddress(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    voteTiming(): NonPayableTransactionObject<string>;

    votingToken(): NonPayableTransactionObject<string>;
  };
  events: {
    EncryptedVote(cb?: Callback<EncryptedVote>): EventEmitter;
    EncryptedVote(
      options?: EventOptions,
      cb?: Callback<EncryptedVote>,
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>,
    ): EventEmitter;

    PriceRequestAdded(cb?: Callback<PriceRequestAdded>): EventEmitter;
    PriceRequestAdded(
      options?: EventOptions,
      cb?: Callback<PriceRequestAdded>,
    ): EventEmitter;

    PriceResolved(cb?: Callback<PriceResolved>): EventEmitter;
    PriceResolved(
      options?: EventOptions,
      cb?: Callback<PriceResolved>,
    ): EventEmitter;

    RewardsRetrieved(cb?: Callback<RewardsRetrieved>): EventEmitter;
    RewardsRetrieved(
      options?: EventOptions,
      cb?: Callback<RewardsRetrieved>,
    ): EventEmitter;

    VoteCommitted(cb?: Callback<VoteCommitted>): EventEmitter;
    VoteCommitted(
      options?: EventOptions,
      cb?: Callback<VoteCommitted>,
    ): EventEmitter;

    VoteRevealed(cb?: Callback<VoteRevealed>): EventEmitter;
    VoteRevealed(
      options?: EventOptions,
      cb?: Callback<VoteRevealed>,
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'EncryptedVote', cb: Callback<EncryptedVote>): void;
  once(
    event: 'EncryptedVote',
    options: EventOptions,
    cb: Callback<EncryptedVote>,
  ): void;

  once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void;
  once(
    event: 'OwnershipTransferred',
    options: EventOptions,
    cb: Callback<OwnershipTransferred>,
  ): void;

  once(event: 'PriceRequestAdded', cb: Callback<PriceRequestAdded>): void;
  once(
    event: 'PriceRequestAdded',
    options: EventOptions,
    cb: Callback<PriceRequestAdded>,
  ): void;

  once(event: 'PriceResolved', cb: Callback<PriceResolved>): void;
  once(
    event: 'PriceResolved',
    options: EventOptions,
    cb: Callback<PriceResolved>,
  ): void;

  once(event: 'RewardsRetrieved', cb: Callback<RewardsRetrieved>): void;
  once(
    event: 'RewardsRetrieved',
    options: EventOptions,
    cb: Callback<RewardsRetrieved>,
  ): void;

  once(event: 'VoteCommitted', cb: Callback<VoteCommitted>): void;
  once(
    event: 'VoteCommitted',
    options: EventOptions,
    cb: Callback<VoteCommitted>,
  ): void;

  once(event: 'VoteRevealed', cb: Callback<VoteRevealed>): void;
  once(
    event: 'VoteRevealed',
    options: EventOptions,
    cb: Callback<VoteRevealed>,
  ): void;
}
