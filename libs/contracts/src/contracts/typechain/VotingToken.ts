/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddedSharedMember = ContractEventLog<{
  roleId: string;
  newMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type RemovedSharedMember = ContractEventLog<{
  roleId: string;
  oldMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type ResetExclusiveMember = ContractEventLog<{
  roleId: string;
  newMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type Snapshot = ContractEventLog<{
  id: string;
  0: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface VotingToken extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): VotingToken;
  clone(): VotingToken;
  methods: {
    addBurner(account: string): NonPayableTransactionObject<void>;

    addMember(
      roleId: number | string | BN,
      newMember: string,
    ): NonPayableTransactionObject<void>;

    addMinter(account: string): NonPayableTransactionObject<void>;

    allowance(
      owner: string,
      spender: string,
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN,
    ): NonPayableTransactionObject<boolean>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    balanceOfAt(
      account: string,
      snapshotId: number | string | BN,
    ): NonPayableTransactionObject<string>;

    burn(value: number | string | BN): NonPayableTransactionObject<void>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN,
    ): NonPayableTransactionObject<boolean>;

    getMember(
      roleId: number | string | BN,
    ): NonPayableTransactionObject<string>;

    holdsRole(
      roleId: number | string | BN,
      memberToCheck: string,
    ): NonPayableTransactionObject<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN,
    ): NonPayableTransactionObject<boolean>;

    mint(
      recipient: string,
      value: number | string | BN,
    ): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    removeMember(
      roleId: number | string | BN,
      memberToRemove: string,
    ): NonPayableTransactionObject<void>;

    renounceMembership(
      roleId: number | string | BN,
    ): NonPayableTransactionObject<void>;

    resetMember(
      roleId: number | string | BN,
      newMember: string,
    ): NonPayableTransactionObject<void>;

    resetOwner(account: string): NonPayableTransactionObject<void>;

    snapshot(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    totalSupplyAt(
      snapshotId: number | string | BN,
    ): NonPayableTransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string | BN,
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN,
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    AddedSharedMember(cb?: Callback<AddedSharedMember>): EventEmitter;
    AddedSharedMember(
      options?: EventOptions,
      cb?: Callback<AddedSharedMember>,
    ): EventEmitter;

    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    RemovedSharedMember(cb?: Callback<RemovedSharedMember>): EventEmitter;
    RemovedSharedMember(
      options?: EventOptions,
      cb?: Callback<RemovedSharedMember>,
    ): EventEmitter;

    ResetExclusiveMember(cb?: Callback<ResetExclusiveMember>): EventEmitter;
    ResetExclusiveMember(
      options?: EventOptions,
      cb?: Callback<ResetExclusiveMember>,
    ): EventEmitter;

    Snapshot(cb?: Callback<Snapshot>): EventEmitter;
    Snapshot(options?: EventOptions, cb?: Callback<Snapshot>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'AddedSharedMember', cb: Callback<AddedSharedMember>): void;
  once(
    event: 'AddedSharedMember',
    options: EventOptions,
    cb: Callback<AddedSharedMember>,
  ): void;

  once(event: 'Approval', cb: Callback<Approval>): void;
  once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void;

  once(event: 'RemovedSharedMember', cb: Callback<RemovedSharedMember>): void;
  once(
    event: 'RemovedSharedMember',
    options: EventOptions,
    cb: Callback<RemovedSharedMember>,
  ): void;

  once(event: 'ResetExclusiveMember', cb: Callback<ResetExclusiveMember>): void;
  once(
    event: 'ResetExclusiveMember',
    options: EventOptions,
    cb: Callback<ResetExclusiveMember>,
  ): void;

  once(event: 'Snapshot', cb: Callback<Snapshot>): void;
  once(event: 'Snapshot', options: EventOptions, cb: Callback<Snapshot>): void;

  once(event: 'Transfer', cb: Callback<Transfer>): void;
  once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void;
}
