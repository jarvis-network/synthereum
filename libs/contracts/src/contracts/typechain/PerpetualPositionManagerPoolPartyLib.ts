/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type EmergencyShutdown = ContractEventLog<{
  caller: string;
  shutdownTimestamp: string;
  0: string;
  1: string;
}>;
export type EndedSponsorPosition = ContractEventLog<{
  sponsor: string;
  0: string;
}>;
export type NewSponsor = ContractEventLog<{
  sponsor: string;
  0: string;
}>;
export type PositionCreated = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Redeem = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  tokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Repay = ContractEventLog<{
  sponsor: string;
  numTokensRepaid: string;
  newTokenCount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RequestWithdrawal = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawalCanceled = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type RequestWithdrawalExecuted = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;
export type SettleEmergencyShutdown = ContractEventLog<{
  caller: string;
  collateralReturned: string;
  tokensBurned: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdrawal = ContractEventLog<{
  sponsor: string;
  collateralAmount: string;
  0: string;
  1: string;
}>;

export interface PerpetualPositionManagerPoolPartyLib extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): PerpetualPositionManagerPoolPartyLib;
  clone(): PerpetualPositionManagerPoolPartyLib;
  methods: {};
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    EmergencyShutdown(cb?: Callback<EmergencyShutdown>): EventEmitter;
    EmergencyShutdown(
      options?: EventOptions,
      cb?: Callback<EmergencyShutdown>,
    ): EventEmitter;

    EndedSponsorPosition(cb?: Callback<EndedSponsorPosition>): EventEmitter;
    EndedSponsorPosition(
      options?: EventOptions,
      cb?: Callback<EndedSponsorPosition>,
    ): EventEmitter;

    NewSponsor(cb?: Callback<NewSponsor>): EventEmitter;
    NewSponsor(options?: EventOptions, cb?: Callback<NewSponsor>): EventEmitter;

    PositionCreated(cb?: Callback<PositionCreated>): EventEmitter;
    PositionCreated(
      options?: EventOptions,
      cb?: Callback<PositionCreated>,
    ): EventEmitter;

    Redeem(cb?: Callback<Redeem>): EventEmitter;
    Redeem(options?: EventOptions, cb?: Callback<Redeem>): EventEmitter;

    Repay(cb?: Callback<Repay>): EventEmitter;
    Repay(options?: EventOptions, cb?: Callback<Repay>): EventEmitter;

    RequestWithdrawal(cb?: Callback<RequestWithdrawal>): EventEmitter;
    RequestWithdrawal(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawal>,
    ): EventEmitter;

    RequestWithdrawalCanceled(
      cb?: Callback<RequestWithdrawalCanceled>,
    ): EventEmitter;
    RequestWithdrawalCanceled(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawalCanceled>,
    ): EventEmitter;

    RequestWithdrawalExecuted(
      cb?: Callback<RequestWithdrawalExecuted>,
    ): EventEmitter;
    RequestWithdrawalExecuted(
      options?: EventOptions,
      cb?: Callback<RequestWithdrawalExecuted>,
    ): EventEmitter;

    SettleEmergencyShutdown(
      cb?: Callback<SettleEmergencyShutdown>,
    ): EventEmitter;
    SettleEmergencyShutdown(
      options?: EventOptions,
      cb?: Callback<SettleEmergencyShutdown>,
    ): EventEmitter;

    Withdrawal(cb?: Callback<Withdrawal>): EventEmitter;
    Withdrawal(options?: EventOptions, cb?: Callback<Withdrawal>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'Deposit', cb: Callback<Deposit>): void;
  once(event: 'Deposit', options: EventOptions, cb: Callback<Deposit>): void;

  once(event: 'EmergencyShutdown', cb: Callback<EmergencyShutdown>): void;
  once(
    event: 'EmergencyShutdown',
    options: EventOptions,
    cb: Callback<EmergencyShutdown>,
  ): void;

  once(event: 'EndedSponsorPosition', cb: Callback<EndedSponsorPosition>): void;
  once(
    event: 'EndedSponsorPosition',
    options: EventOptions,
    cb: Callback<EndedSponsorPosition>,
  ): void;

  once(event: 'NewSponsor', cb: Callback<NewSponsor>): void;
  once(
    event: 'NewSponsor',
    options: EventOptions,
    cb: Callback<NewSponsor>,
  ): void;

  once(event: 'PositionCreated', cb: Callback<PositionCreated>): void;
  once(
    event: 'PositionCreated',
    options: EventOptions,
    cb: Callback<PositionCreated>,
  ): void;

  once(event: 'Redeem', cb: Callback<Redeem>): void;
  once(event: 'Redeem', options: EventOptions, cb: Callback<Redeem>): void;

  once(event: 'Repay', cb: Callback<Repay>): void;
  once(event: 'Repay', options: EventOptions, cb: Callback<Repay>): void;

  once(event: 'RequestWithdrawal', cb: Callback<RequestWithdrawal>): void;
  once(
    event: 'RequestWithdrawal',
    options: EventOptions,
    cb: Callback<RequestWithdrawal>,
  ): void;

  once(
    event: 'RequestWithdrawalCanceled',
    cb: Callback<RequestWithdrawalCanceled>,
  ): void;
  once(
    event: 'RequestWithdrawalCanceled',
    options: EventOptions,
    cb: Callback<RequestWithdrawalCanceled>,
  ): void;

  once(
    event: 'RequestWithdrawalExecuted',
    cb: Callback<RequestWithdrawalExecuted>,
  ): void;
  once(
    event: 'RequestWithdrawalExecuted',
    options: EventOptions,
    cb: Callback<RequestWithdrawalExecuted>,
  ): void;

  once(
    event: 'SettleEmergencyShutdown',
    cb: Callback<SettleEmergencyShutdown>,
  ): void;
  once(
    event: 'SettleEmergencyShutdown',
    options: EventOptions,
    cb: Callback<SettleEmergencyShutdown>,
  ): void;

  once(event: 'Withdrawal', cb: Callback<Withdrawal>): void;
  once(
    event: 'Withdrawal',
    options: EventOptions,
    cb: Callback<Withdrawal>,
  ): void;
}
