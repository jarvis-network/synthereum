/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IDerivative extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): IDerivative;
  clone(): IDerivative;
  methods: {
    addAdmin(admin: string): NonPayableTransactionObject<void>;

    addAdminAndPool(adminAndPool: string): NonPayableTransactionObject<void>;

    addPool(pool: string): NonPayableTransactionObject<void>;

    addSyntheticTokenAdmin(
      derivative: string,
    ): NonPayableTransactionObject<void>;

    addSyntheticTokenAdminAndMinterAndBurner(
      derivative: string,
    ): NonPayableTransactionObject<void>;

    addSyntheticTokenBurner(
      derivative: string,
    ): NonPayableTransactionObject<void>;

    addSyntheticTokenMinter(
      derivative: string,
    ): NonPayableTransactionObject<void>;

    cancelWithdrawal(): NonPayableTransactionObject<void>;

    collateralCurrency(): NonPayableTransactionObject<string>;

    create(
      collateralAmount: [number | string | BN],
      numTokens: [number | string | BN],
    ): NonPayableTransactionObject<void>;

    deposit(
      collateralAmount: [number | string | BN],
    ): NonPayableTransactionObject<void>;

    depositTo(
      sponsor: string,
      collateralAmount: [number | string | BN],
    ): NonPayableTransactionObject<void>;

    emergencyShutdown(): NonPayableTransactionObject<void>;

    emergencyShutdownPrice(): NonPayableTransactionObject<[string]>;

    feePayerData(): NonPayableTransactionObject<
      [string, string, string, [string]]
    >;

    getAdminMembers(): NonPayableTransactionObject<string[]>;

    getCollateral(sponsor: string): NonPayableTransactionObject<[string]>;

    getPoolMembers(): NonPayableTransactionObject<string[]>;

    globalPositionData(): NonPayableTransactionObject<[[string], [string]]>;

    positionManagerData(): NonPayableTransactionObject<
      [string, string, string, [string], [string], string, string]
    >;

    redeem(
      numTokens: [number | string | BN],
    ): NonPayableTransactionObject<[string]>;

    remargin(): NonPayableTransactionObject<void>;

    renounceAdmin(): NonPayableTransactionObject<void>;

    renounceAdminAndPool(): NonPayableTransactionObject<void>;

    renouncePool(): NonPayableTransactionObject<void>;

    renounceSyntheticTokenAdmin(): NonPayableTransactionObject<void>;

    renounceSyntheticTokenAdminAndMinterAndBurner(): NonPayableTransactionObject<void>;

    renounceSyntheticTokenBurner(): NonPayableTransactionObject<void>;

    renounceSyntheticTokenMinter(): NonPayableTransactionObject<void>;

    repay(numTokens: [number | string | BN]): NonPayableTransactionObject<void>;

    requestWithdrawal(
      collateralAmount: [number | string | BN],
    ): NonPayableTransactionObject<void>;

    settleEmergencyShutdown(): NonPayableTransactionObject<[string]>;

    tokenCurrency(): NonPayableTransactionObject<string>;

    totalPositionCollateral(): NonPayableTransactionObject<[string]>;

    trimExcess(token: string): NonPayableTransactionObject<[string]>;

    withdraw(
      collateralAmount: [number | string | BN],
    ): NonPayableTransactionObject<[string]>;

    withdrawPassedRequest(): NonPayableTransactionObject<[string]>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
