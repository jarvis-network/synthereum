/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddedToWhitelist = ContractEventLog<{
  addedAddress: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RemovedFromWhitelist = ContractEventLog<{
  removedAddress: string;
  0: string;
}>;

export interface AddressWhitelist extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): AddressWhitelist;
  clone(): AddressWhitelist;
  methods: {
    addToWhitelist(newElement: string): NonPayableTransactionObject<void>;

    getWhitelist(): NonPayableTransactionObject<string[]>;

    isOnWhitelist(elementToCheck: string): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    removeFromWhitelist(
      elementToRemove: string,
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    whitelist(arg0: string): NonPayableTransactionObject<string>;

    whitelistIndices(
      arg0: number | string | BN,
    ): NonPayableTransactionObject<string>;
  };
  events: {
    AddedToWhitelist(cb?: Callback<AddedToWhitelist>): EventEmitter;
    AddedToWhitelist(
      options?: EventOptions,
      cb?: Callback<AddedToWhitelist>,
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>,
    ): EventEmitter;

    RemovedFromWhitelist(cb?: Callback<RemovedFromWhitelist>): EventEmitter;
    RemovedFromWhitelist(
      options?: EventOptions,
      cb?: Callback<RemovedFromWhitelist>,
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'AddedToWhitelist', cb: Callback<AddedToWhitelist>): void;
  once(
    event: 'AddedToWhitelist',
    options: EventOptions,
    cb: Callback<AddedToWhitelist>,
  ): void;

  once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void;
  once(
    event: 'OwnershipTransferred',
    options: EventOptions,
    cb: Callback<OwnershipTransferred>,
  ): void;

  once(event: 'RemovedFromWhitelist', cb: Callback<RemovedFromWhitelist>): void;
  once(
    event: 'RemovedFromWhitelist',
    options: EventOptions,
    cb: Callback<RemovedFromWhitelist>,
  ): void;
}
