/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IDerivative extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IDerivative;
  clone(): IDerivative;
  methods: {
    /**
     * Add admin and pool to DEFAULT_ADMIN_ROLE and POOL_ROLE
     * @param adminAndPool address of admin/pool.
     */
    addAdminAndPool(adminAndPool: string): NonPayableTransactionObject<void>;

    /**
     * Gets the collateral currency of the derivative
     */
    collateralCurrency(): NonPayableTransactionObject<string>;

    /**
     * Accessor method for the list of members with admin role
     */
    getAdminMembers(): NonPayableTransactionObject<string[]>;

    /**
     * Accessor method for the list of members with pool role
     */
    getPoolMembers(): NonPayableTransactionObject<string[]>;

    /**
     * Admin renounce to DEFAULT_ADMIN_ROLE
     */
    renounceAdmin(): NonPayableTransactionObject<void>;

    /**
     * Get emergency shutdown price
     */
    tokenCurrency(): NonPayableTransactionObject<string>;

    /**
     * Get data of feePayerPoolParty contract that is based contract of perpetual derivative
     */
    feePayerData(): NonPayableTransactionObject<
      [string, string, string, [string]]
    >;

    /**
     * Get position data of perpetual derivative
     */
    positionManagerData(): NonPayableTransactionObject<
      [string, string, string, [string], [string], string, string]
    >;

    /**
     * Get global position data of perpetual derivative
     */
    globalPositionData(): NonPayableTransactionObject<[[string], [string]]>;

    depositTo(
      sponsor: string,
      collateralAmount: [number | string]
    ): NonPayableTransactionObject<void>;

    deposit(
      collateralAmount: [number | string]
    ): NonPayableTransactionObject<void>;

    withdraw(
      collateralAmount: [number | string]
    ): NonPayableTransactionObject<[string]>;

    requestWithdrawal(
      collateralAmount: [number | string]
    ): NonPayableTransactionObject<void>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.
     */
    withdrawPassedRequest(): NonPayableTransactionObject<[string]>;

    /**
     * Cancels a pending withdrawal request.
     */
    cancelWithdrawal(): NonPayableTransactionObject<void>;

    create(
      collateralAmount: [number | string],
      numTokens: [number | string]
    ): NonPayableTransactionObject<void>;

    redeem(numTokens: [number | string]): NonPayableTransactionObject<[string]>;

    repay(numTokens: [number | string]): NonPayableTransactionObject<void>;

    /**
     * This burns all tokens from the caller of `tokenCurrency` and sends back the resolved settlement value of `feePayerData.collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.This contract must have the Burner role for the `tokenCurrency`.Note that this function does not call the updateFundingRate modifier to update the funding rate as this function is only called after an emergency shutdown & there should be no funding rate updates after the shutdown.
     * If the contract is emergency shutdown then all token holders and sponsors can redeem their tokens or remaining collateral for the underlying asset at the prevailing price defined by a DVM vote.
     */
    settleEmergencyShutdown(): NonPayableTransactionObject<[string]>;

    /**
     * Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`. Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal to occur via the `settleEmergencyShutdown` function.
     * Premature contract settlement under emergency circumstances.
     */
    emergencyShutdown(): NonPayableTransactionObject<void>;

    /**
     * This is supposed to be implemented by any contract that inherits `AdministrateeInterface` and callable only by the Governor contract. This method is therefore minimally implemented in this contract and does nothing.
     * Theoretically supposed to pay fees and move money between margin accounts to make sure they reflect the NAV of the contract. However, this functionality doesn't apply to this contract.
     */
    remargin(): NonPayableTransactionObject<void>;

    /**
     * This will drain down to the amount of tracked collateral and drain the full balance of any other token.
     * Drains any excess balance of the provided ERC20 token to a pre-selected beneficiary.
     * @param token address of the ERC20 token whose excess balance should be drained.
     */
    trimExcess(token: string): NonPayableTransactionObject<[string]>;

    /**
     * Add TokenSponsor to POOL_ROLE
     * @param pool address of the TokenSponsor pool.
     */
    addPool(pool: string): NonPayableTransactionObject<void>;

    /**
     * Add admin to DEFAULT_ADMIN_ROLE
     * @param admin address of the Admin.
     */
    addAdmin(admin: string): NonPayableTransactionObject<void>;

    /**
     * TokenSponsor pool renounce to POOL_ROLE
     */
    renouncePool(): NonPayableTransactionObject<void>;

    /**
     * Admin and TokenSponsor pool renounce to DEFAULT_ADMIN_ROLE and POOL_ROLE
     */
    renounceAdminAndPool(): NonPayableTransactionObject<void>;

    /**
     * Add derivative as minter of synthetic token
     * @param derivative address of the derivative
     */
    addSyntheticTokenMinter(
      derivative: string
    ): NonPayableTransactionObject<void>;

    /**
     * Add derivative as burner of synthetic token
     * @param derivative address of the derivative
     */
    addSyntheticTokenBurner(
      derivative: string
    ): NonPayableTransactionObject<void>;

    /**
     * Add derivative as admin of synthetic token
     * @param derivative address of the derivative
     */
    addSyntheticTokenAdmin(
      derivative: string
    ): NonPayableTransactionObject<void>;

    /**
     * Add derivative as admin, minter and burner of synthetic token
     * @param derivative address of the derivative
     */
    addSyntheticTokenAdminAndMinterAndBurner(
      derivative: string
    ): NonPayableTransactionObject<void>;

    /**
     * This contract renounce to be minter of synthetic token
     */
    renounceSyntheticTokenMinter(): NonPayableTransactionObject<void>;

    /**
     * This contract renounce to be burner of synthetic token
     */
    renounceSyntheticTokenBurner(): NonPayableTransactionObject<void>;

    /**
     * This contract renounce to be admin of synthetic token
     */
    renounceSyntheticTokenAdmin(): NonPayableTransactionObject<void>;

    /**
     * This contract renounce to be admin, minter and burner of synthetic token
     */
    renounceSyntheticTokenAdminAndMinterAndBurner(): NonPayableTransactionObject<void>;

    /**
     * This is necessary because the struct returned by the positions() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a sponsor's collateral.
     * @param sponsor address whose collateral amount is retrieved.
     */
    getCollateral(sponsor: string): NonPayableTransactionObject<[string]>;

    /**
     * Accessor method for the total collateral stored within the PerpetualPositionManager.
     */
    totalPositionCollateral(): NonPayableTransactionObject<[string]>;

    /**
     * Get the price of synthetic token set by DVM after emergencyShutdown call
     */
    emergencyShutdownPrice(): NonPayableTransactionObject<[string]>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
