/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddDerivativeFactory = ContractEventLog<{
  version: string;
  derivativeFactory: string;
  0: string;
  1: string;
}>;
export type AddPoolFactory = ContractEventLog<{
  version: string;
  poolFactory: string;
  0: string;
  1: string;
}>;
export type RemoveDerivativeFactory = ContractEventLog<{
  version: string;
  0: string;
}>;
export type RemovePoolFactory = ContractEventLog<{
  version: string;
  0: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;

export interface SynthereumFactoryVersioning extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SynthereumFactoryVersioning;
  clone(): SynthereumFactoryVersioning;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    MAINTAINER_ROLE(): NonPayableTransactionObject<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: string | number[],
      index: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * Set the address of a version of a pool factory
     * @param poolFactory address of the pool factory
     * @param version uint8 of the version index
     */
    setPoolFactory(
      version: number | string,
      poolFactory: string
    ): NonPayableTransactionObject<void>;

    /**
     * Removes the address of a version of a pool factory
     * @param version uint8 of the version index
     */
    removePoolFactory(
      version: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Set the address of a version of a perpetual derivative factory
     * @param derivativeFactory address of the perpetual derivative factory
     * @param version uint8 of the version index
     */
    setDerivativeFactory(
      version: number | string,
      derivativeFactory: string
    ): NonPayableTransactionObject<void>;

    /**
     * Removes the address of a version of a perpetual derivative factory
     * @param version uint8 of the version index
     */
    removeDerivativeFactory(
      version: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Returns the address of a version of pool factory if it exists, otherwise reverts
     * @param version uint8 of the version index
     */
    getPoolFactoryVersion(
      version: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * Returns the number of existing versions of pool factory
     */
    numberOfVerisonsOfPoolFactory(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of a version of perpetual derivative factory if it exists, otherwise reverts
     * @param version uint8 of the version index
     */
    getDerivativeFactoryVersion(
      version: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * Returns the number of existing versions of perpetual derivative factory
     */
    numberOfVerisonsOfDerivativeFactory(): NonPayableTransactionObject<string>;
  };
  events: {
    AddDerivativeFactory(cb?: Callback<AddDerivativeFactory>): EventEmitter;
    AddDerivativeFactory(
      options?: EventOptions,
      cb?: Callback<AddDerivativeFactory>
    ): EventEmitter;

    AddPoolFactory(cb?: Callback<AddPoolFactory>): EventEmitter;
    AddPoolFactory(
      options?: EventOptions,
      cb?: Callback<AddPoolFactory>
    ): EventEmitter;

    RemoveDerivativeFactory(
      cb?: Callback<RemoveDerivativeFactory>
    ): EventEmitter;
    RemoveDerivativeFactory(
      options?: EventOptions,
      cb?: Callback<RemoveDerivativeFactory>
    ): EventEmitter;

    RemovePoolFactory(cb?: Callback<RemovePoolFactory>): EventEmitter;
    RemovePoolFactory(
      options?: EventOptions,
      cb?: Callback<RemovePoolFactory>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddDerivativeFactory", cb: Callback<AddDerivativeFactory>): void;
  once(
    event: "AddDerivativeFactory",
    options: EventOptions,
    cb: Callback<AddDerivativeFactory>
  ): void;

  once(event: "AddPoolFactory", cb: Callback<AddPoolFactory>): void;
  once(
    event: "AddPoolFactory",
    options: EventOptions,
    cb: Callback<AddPoolFactory>
  ): void;

  once(
    event: "RemoveDerivativeFactory",
    cb: Callback<RemoveDerivativeFactory>
  ): void;
  once(
    event: "RemoveDerivativeFactory",
    options: EventOptions,
    cb: Callback<RemoveDerivativeFactory>
  ): void;

  once(event: "RemovePoolFactory", cb: Callback<RemovePoolFactory>): void;
  once(
    event: "RemovePoolFactory",
    options: EventOptions,
    cb: Callback<RemovePoolFactory>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;
}
