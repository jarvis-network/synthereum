/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface VotingInterface extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VotingInterface;
  clone(): VotingInterface;
  methods: {
    commitVote(
      identifier: string | number[],
      time: number | string,
      hash: string | number[]
    ): NonPayableTransactionObject<void>;

    batchCommit(
      commits: [
        string | number[],
        number | string,
        string | number[],
        string | number[]
      ][]
    ): NonPayableTransactionObject<void>;

    commitAndEmitEncryptedVote(
      identifier: string | number[],
      time: number | string,
      hash: string | number[],
      encryptedVote: string | number[]
    ): NonPayableTransactionObject<void>;

    snapshotCurrentRound(
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    revealVote(
      identifier: string | number[],
      time: number | string,
      price: number | string,
      salt: number | string
    ): NonPayableTransactionObject<void>;

    batchReveal(
      reveals: [
        string | number[],
        number | string,
        number | string,
        number | string
      ][]
    ): NonPayableTransactionObject<void>;

    getPendingRequests(): NonPayableTransactionObject<
      [string, string, string][]
    >;

    getVotePhase(): NonPayableTransactionObject<string>;

    getCurrentRoundId(): NonPayableTransactionObject<string>;

    retrieveRewards(
      voterAddress: string,
      roundId: number | string,
      toRetrieve: [string | number[], number | string][]
    ): NonPayableTransactionObject<[string]>;

    setMigrated(newVotingAddress: string): NonPayableTransactionObject<void>;

    setInflationRate(
      newInflationRate: [number | string]
    ): NonPayableTransactionObject<void>;

    setGatPercentage(
      newGatPercentage: [number | string]
    ): NonPayableTransactionObject<void>;

    setRewardsExpirationTimeout(
      NewRewardsExpirationTimeout: number | string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
