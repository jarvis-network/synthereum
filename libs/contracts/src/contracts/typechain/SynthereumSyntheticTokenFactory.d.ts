/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface SynthereumSyntheticTokenFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SynthereumSyntheticTokenFactory;
  clone(): SynthereumSyntheticTokenFactory;
  methods: {
    derivativeVersion(): NonPayableTransactionObject<string>;

    synthereumFinder(): NonPayableTransactionObject<string>;

    /**
     * Check if the sender is a derivative Factory and deploy a new synthetic token
     * @param tokenDecimals used to define the precision used in the token's numerical representation
     * @param tokenName used to describe the new token
     * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars
     */
    createToken(
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: number | string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
