/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface OptimisticOracleInterface extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OptimisticOracleInterface;
  clone(): OptimisticOracleInterface;
  methods: {
    ancillaryBytesLimit(): NonPayableTransactionObject<string>;

    requestPrice(
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[],
      currency: string,
      reward: number | string
    ): NonPayableTransactionObject<string>;

    setBond(
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[],
      bond: number | string
    ): NonPayableTransactionObject<string>;

    setRefundOnDispute(
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    setCustomLiveness(
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[],
      customLiveness: number | string
    ): NonPayableTransactionObject<void>;

    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[],
      proposedPrice: number | string
    ): NonPayableTransactionObject<string>;

    proposePrice(
      requester: string,
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[],
      proposedPrice: number | string
    ): NonPayableTransactionObject<string>;

    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    disputePrice(
      requester: string,
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    settleAndGetPrice(
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    settle(
      requester: string,
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    getRequest(
      requester: string,
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        boolean,
        boolean,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ]
    >;

    getState(
      requester: string,
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    hasPrice(
      requester: string,
      identifier: string | number[],
      timestamp: number | string,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
