/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ISynthereumPoolGeneral extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ISynthereumPoolGeneral;
  clone(): ISynthereumPoolGeneral;
  methods: {
    collateralToken(): NonPayableTransactionObject<string>;

    /**
     * Called by a source Pool's `exchange` function to mint destination tokensThis functon can be called only by a pool registred in the PoolRegister contract
     * @param collateralAmount The amount of collateral to use from the source Pool
     * @param derivative The derivative of the destination pool to use for mint
     * @param numTokens The number of new tokens to mint
     * @param srcDerivative Derivative used by the source pool
     */
    exchangeMint(
      srcDerivative: string,
      derivative: string,
      collateralAmount: number | string,
      numTokens: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Returns price identifier of the pool
     */
    getPriceFeedIdentifier(): NonPayableTransactionObject<string>;

    /**
     * Check if a derivative is in the whitelist of this pool
     * @param derivative Perpetual derivative
     */
    isDerivativeAdmitted(
      derivative: string
    ): NonPayableTransactionObject<boolean>;

    synthereumFinder(): NonPayableTransactionObject<string>;

    syntheticToken(): NonPayableTransactionObject<string>;

    syntheticTokenSymbol(): NonPayableTransactionObject<string>;

    version(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
