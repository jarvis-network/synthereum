/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddDerivative = ContractEventLog<{
  pool: string;
  derivative: string;
  0: string;
  1: string;
}>;
export type Exchange = ContractEventLog<{
  account: string;
  sourcePool: string;
  destPool: string;
  numTokensSent: string;
  destNumTokensReceived: string;
  feePaid: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Mint = ContractEventLog<{
  account: string;
  pool: string;
  collateralSent: string;
  numTokensReceived: string;
  feePaid: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Redeem = ContractEventLog<{
  account: string;
  pool: string;
  numTokensSent: string;
  collateralReceived: string;
  feePaid: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RemoveDerivative = ContractEventLog<{
  pool: string;
  derivative: string;
  0: string;
  1: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetFeePercentage = ContractEventLog<{
  feePercentage: string;
  0: string;
}>;
export type SetFeeRecipients = ContractEventLog<{
  feeRecipients: string[];
  feeProportions: string[];
  0: string[];
  1: string[];
}>;
export type Settlement = ContractEventLog<{
  account: string;
  pool: string;
  numTokens: string;
  collateralSettled: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface SynthereumPool extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): SynthereumPool;
  clone(): SynthereumPool;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    EXCHANGE_TYPEHASH(): NonPayableTransactionObject<string>;

    LIQUIDITY_PROVIDER_ROLE(): NonPayableTransactionObject<string>;

    MAINTAINER_ROLE(): NonPayableTransactionObject<string>;

    MINT_TYPEHASH(): NonPayableTransactionObject<string>;

    REDEEM_TYPEHASH(): NonPayableTransactionObject<string>;

    VALIDATOR_ROLE(): NonPayableTransactionObject<string>;

    addDerivative(derivative: string): NonPayableTransactionObject<void>;

    addRoleInDerivative(
      derivative: string,
      derivativeRole: number | string | BN,
      addressToAdd: string,
    ): NonPayableTransactionObject<void>;

    addRoleInSynthToken(
      derivative: string,
      synthTokenRole: number | string | BN,
      addressToAdd: string,
    ): NonPayableTransactionObject<void>;

    calculateFee(
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<string>;

    collateralToken(): NonPayableTransactionObject<string>;

    depositIntoDerivative(
      derivative: string,
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<void>;

    emergencyShutdown(derivative: string): NonPayableTransactionObject<void>;

    exchange(
      exchangeMetaTx: [
        string,
        string,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ],
      signature: [number | string | BN, string | number[], string | number[]],
    ): NonPayableTransactionObject<string>;

    exchangeMint(
      srcDerivative: string,
      derivative: string,
      collateralAmount: number | string | BN,
      numTokens: number | string | BN,
    ): NonPayableTransactionObject<void>;

    fastWithdraw(
      derivative: string,
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<string>;

    getAllDerivatives(): NonPayableTransactionObject<string[]>;

    getFeeInfo(): NonPayableTransactionObject<[[string], string[], string[]]>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string | BN,
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[],
    ): NonPayableTransactionObject<string>;

    getStartingCollateralization(): NonPayableTransactionObject<string>;

    getUserNonce(user: string): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string,
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string,
    ): NonPayableTransactionObject<boolean>;

    isContractAllowed(): NonPayableTransactionObject<boolean>;

    isDerivativeAdmitted(
      derivative: string,
    ): NonPayableTransactionObject<boolean>;

    mint(
      mintMetaTx: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ],
      signature: [number | string | BN, string | number[], string | number[]],
    ): NonPayableTransactionObject<string>;

    redeem(
      redeemMetaTx: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ],
      signature: [number | string | BN, string | number[], string | number[]],
    ): NonPayableTransactionObject<string>;

    removeDerivative(derivative: string): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string,
    ): NonPayableTransactionObject<void>;

    renounceRoleInDerivative(
      derivative: string,
      derivativeRole: number | string | BN,
    ): NonPayableTransactionObject<void>;

    renounceRoleInSynthToken(
      derivative: string,
      synthTokenRole: number | string | BN,
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string,
    ): NonPayableTransactionObject<void>;

    setFee(
      _fee: [[number | string | BN], string[], (number | string | BN)[]],
    ): NonPayableTransactionObject<void>;

    setFeePercentage(
      _feePercentage: number | string | BN,
    ): NonPayableTransactionObject<void>;

    setFeeRecipients(
      _feeRecipients: string[],
      _feeProportions: (number | string | BN)[],
    ): NonPayableTransactionObject<void>;

    setIsContractAllowed(
      isContractAllowed: boolean,
    ): NonPayableTransactionObject<void>;

    setStartingCollateralization(
      startingCollateralRatio: number | string | BN,
    ): NonPayableTransactionObject<void>;

    settleEmergencyShutdown(
      derivative: string,
    ): NonPayableTransactionObject<string>;

    slowWithdrawPassedRequest(
      derivative: string,
    ): NonPayableTransactionObject<string>;

    slowWithdrawRequest(
      derivative: string,
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<void>;

    synthereumFinder(): NonPayableTransactionObject<string>;

    syntheticToken(): NonPayableTransactionObject<string>;

    syntheticTokenSymbol(): NonPayableTransactionObject<string>;

    version(): NonPayableTransactionObject<string>;

    withdrawFromPool(
      collateralAmount: number | string | BN,
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AddDerivative(cb?: Callback<AddDerivative>): EventEmitter;
    AddDerivative(
      options?: EventOptions,
      cb?: Callback<AddDerivative>,
    ): EventEmitter;

    Exchange(cb?: Callback<Exchange>): EventEmitter;
    Exchange(options?: EventOptions, cb?: Callback<Exchange>): EventEmitter;

    Mint(cb?: Callback<Mint>): EventEmitter;
    Mint(options?: EventOptions, cb?: Callback<Mint>): EventEmitter;

    Redeem(cb?: Callback<Redeem>): EventEmitter;
    Redeem(options?: EventOptions, cb?: Callback<Redeem>): EventEmitter;

    RemoveDerivative(cb?: Callback<RemoveDerivative>): EventEmitter;
    RemoveDerivative(
      options?: EventOptions,
      cb?: Callback<RemoveDerivative>,
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>,
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>,
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>,
    ): EventEmitter;

    SetFeePercentage(cb?: Callback<SetFeePercentage>): EventEmitter;
    SetFeePercentage(
      options?: EventOptions,
      cb?: Callback<SetFeePercentage>,
    ): EventEmitter;

    SetFeeRecipients(cb?: Callback<SetFeeRecipients>): EventEmitter;
    SetFeeRecipients(
      options?: EventOptions,
      cb?: Callback<SetFeeRecipients>,
    ): EventEmitter;

    Settlement(cb?: Callback<Settlement>): EventEmitter;
    Settlement(options?: EventOptions, cb?: Callback<Settlement>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'AddDerivative', cb: Callback<AddDerivative>): void;
  once(
    event: 'AddDerivative',
    options: EventOptions,
    cb: Callback<AddDerivative>,
  ): void;

  once(event: 'Exchange', cb: Callback<Exchange>): void;
  once(event: 'Exchange', options: EventOptions, cb: Callback<Exchange>): void;

  once(event: 'Mint', cb: Callback<Mint>): void;
  once(event: 'Mint', options: EventOptions, cb: Callback<Mint>): void;

  once(event: 'Redeem', cb: Callback<Redeem>): void;
  once(event: 'Redeem', options: EventOptions, cb: Callback<Redeem>): void;

  once(event: 'RemoveDerivative', cb: Callback<RemoveDerivative>): void;
  once(
    event: 'RemoveDerivative',
    options: EventOptions,
    cb: Callback<RemoveDerivative>,
  ): void;

  once(event: 'RoleAdminChanged', cb: Callback<RoleAdminChanged>): void;
  once(
    event: 'RoleAdminChanged',
    options: EventOptions,
    cb: Callback<RoleAdminChanged>,
  ): void;

  once(event: 'RoleGranted', cb: Callback<RoleGranted>): void;
  once(
    event: 'RoleGranted',
    options: EventOptions,
    cb: Callback<RoleGranted>,
  ): void;

  once(event: 'RoleRevoked', cb: Callback<RoleRevoked>): void;
  once(
    event: 'RoleRevoked',
    options: EventOptions,
    cb: Callback<RoleRevoked>,
  ): void;

  once(event: 'SetFeePercentage', cb: Callback<SetFeePercentage>): void;
  once(
    event: 'SetFeePercentage',
    options: EventOptions,
    cb: Callback<SetFeePercentage>,
  ): void;

  once(event: 'SetFeeRecipients', cb: Callback<SetFeeRecipients>): void;
  once(
    event: 'SetFeeRecipients',
    options: EventOptions,
    cb: Callback<SetFeeRecipients>,
  ): void;

  once(event: 'Settlement', cb: Callback<Settlement>): void;
  once(
    event: 'Settlement',
    options: EventOptions,
    cb: Callback<Settlement>,
  ): void;
}
