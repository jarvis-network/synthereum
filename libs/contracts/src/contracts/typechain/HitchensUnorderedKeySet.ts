/* File autogenerated by synthereum-lib. Do not edit manually. */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogUpdate = ContractEventLog<{
  sender: string;
  action: string;
  key: string;
  0: string;
  1: string;
  2: string;
}>;

export interface HitchensUnorderedKeySet extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): HitchensUnorderedKeySet;
  clone(): HitchensUnorderedKeySet;
  methods: {
    count(): NonPayableTransactionObject<string>;

    exists(key: string | number[]): NonPayableTransactionObject<boolean>;

    insert(key: string | number[]): NonPayableTransactionObject<void>;

    keyAtIndex(
      index: number | string | BN,
    ): NonPayableTransactionObject<string>;

    nukeSet(): NonPayableTransactionObject<void>;

    remove(key: string | number[]): NonPayableTransactionObject<void>;
  };
  events: {
    LogUpdate(cb?: Callback<LogUpdate>): EventEmitter;
    LogUpdate(options?: EventOptions, cb?: Callback<LogUpdate>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'LogUpdate', cb: Callback<LogUpdate>): void;
  once(
    event: 'LogUpdate',
    options: EventOptions,
    cb: Callback<LogUpdate>,
  ): void;
}
