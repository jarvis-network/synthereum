/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddedSharedMember = ContractEventLog<{
  roleId: string;
  newMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewContractRegistered = ContractEventLog<{
  contractAddress: string;
  creator: string;
  parties: string[];
  0: string;
  1: string;
  2: string[];
}>;
export type PartyAdded = ContractEventLog<{
  contractAddress: string;
  party: string;
  0: string;
  1: string;
}>;
export type PartyRemoved = ContractEventLog<{
  contractAddress: string;
  party: string;
  0: string;
  1: string;
}>;
export type RemovedSharedMember = ContractEventLog<{
  roleId: string;
  oldMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type ResetExclusiveMember = ContractEventLog<{
  roleId: string;
  newMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Registry extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Registry;
  clone(): Registry;
  methods: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: number | string,
      newMember: string
    ): NonPayableTransactionObject<void>;

    contractMap(
      arg0: string
    ): NonPayableTransactionObject<{
      valid: string;
      index: string;
      0: string;
      1: string;
    }>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(roleId: number | string): NonPayableTransactionObject<string>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: number | string,
      memberToCheck: string
    ): NonPayableTransactionObject<boolean>;

    registeredContracts(
      arg0: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: number | string,
      memberToRemove: string
    ): NonPayableTransactionObject<void>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: number | string,
      newMember: string
    ): NonPayableTransactionObject<void>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    addPartyToContract(party: string): NonPayableTransactionObject<void>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    removePartyFromContract(
      partyAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    isContractRegistered(
      contractAddress: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string
    ): NonPayableTransactionObject<string[]>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(): NonPayableTransactionObject<string[]>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    AddedSharedMember(cb?: Callback<AddedSharedMember>): EventEmitter;
    AddedSharedMember(
      options?: EventOptions,
      cb?: Callback<AddedSharedMember>
    ): EventEmitter;

    NewContractRegistered(cb?: Callback<NewContractRegistered>): EventEmitter;
    NewContractRegistered(
      options?: EventOptions,
      cb?: Callback<NewContractRegistered>
    ): EventEmitter;

    PartyAdded(cb?: Callback<PartyAdded>): EventEmitter;
    PartyAdded(options?: EventOptions, cb?: Callback<PartyAdded>): EventEmitter;

    PartyRemoved(cb?: Callback<PartyRemoved>): EventEmitter;
    PartyRemoved(
      options?: EventOptions,
      cb?: Callback<PartyRemoved>
    ): EventEmitter;

    RemovedSharedMember(cb?: Callback<RemovedSharedMember>): EventEmitter;
    RemovedSharedMember(
      options?: EventOptions,
      cb?: Callback<RemovedSharedMember>
    ): EventEmitter;

    ResetExclusiveMember(cb?: Callback<ResetExclusiveMember>): EventEmitter;
    ResetExclusiveMember(
      options?: EventOptions,
      cb?: Callback<ResetExclusiveMember>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddedSharedMember", cb: Callback<AddedSharedMember>): void;
  once(
    event: "AddedSharedMember",
    options: EventOptions,
    cb: Callback<AddedSharedMember>
  ): void;

  once(
    event: "NewContractRegistered",
    cb: Callback<NewContractRegistered>
  ): void;
  once(
    event: "NewContractRegistered",
    options: EventOptions,
    cb: Callback<NewContractRegistered>
  ): void;

  once(event: "PartyAdded", cb: Callback<PartyAdded>): void;
  once(
    event: "PartyAdded",
    options: EventOptions,
    cb: Callback<PartyAdded>
  ): void;

  once(event: "PartyRemoved", cb: Callback<PartyRemoved>): void;
  once(
    event: "PartyRemoved",
    options: EventOptions,
    cb: Callback<PartyRemoved>
  ): void;

  once(event: "RemovedSharedMember", cb: Callback<RemovedSharedMember>): void;
  once(
    event: "RemovedSharedMember",
    options: EventOptions,
    cb: Callback<RemovedSharedMember>
  ): void;

  once(event: "ResetExclusiveMember", cb: Callback<ResetExclusiveMember>): void;
  once(
    event: "ResetExclusiveMember",
    options: EventOptions,
    cb: Callback<ResetExclusiveMember>
  ): void;
}
