/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddedSharedMember = ContractEventLog<{
  roleId: string;
  newMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewContractRegistered = ContractEventLog<{
  contractAddress: string;
  creator: string;
  parties: string[];
  0: string;
  1: string;
  2: string[];
}>;
export type PartyAdded = ContractEventLog<{
  contractAddress: string;
  party: string;
  0: string;
  1: string;
}>;
export type PartyRemoved = ContractEventLog<{
  contractAddress: string;
  party: string;
  0: string;
  1: string;
}>;
export type RemovedSharedMember = ContractEventLog<{
  roleId: string;
  oldMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;
export type ResetExclusiveMember = ContractEventLog<{
  roleId: string;
  newMember: string;
  manager: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Registry extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Registry;
  clone(): Registry;
  methods: {
    addMember(
      roleId: number | string,
      newMember: string
    ): NonPayableTransactionObject<void>;

    contractMap(
      arg0: string
    ): NonPayableTransactionObject<{
      valid: string;
      index: string;
      0: string;
      1: string;
    }>;

    getMember(roleId: number | string): NonPayableTransactionObject<string>;

    holdsRole(
      roleId: number | string,
      memberToCheck: string
    ): NonPayableTransactionObject<boolean>;

    registeredContracts(
      arg0: number | string
    ): NonPayableTransactionObject<string>;

    removeMember(
      roleId: number | string,
      memberToRemove: string
    ): NonPayableTransactionObject<void>;

    renounceMembership(
      roleId: number | string
    ): NonPayableTransactionObject<void>;

    resetMember(
      roleId: number | string,
      newMember: string
    ): NonPayableTransactionObject<void>;

    registerContract(
      parties: string[],
      contractAddress: string
    ): NonPayableTransactionObject<void>;

    addPartyToContract(party: string): NonPayableTransactionObject<void>;

    removePartyFromContract(
      partyAddress: string
    ): NonPayableTransactionObject<void>;

    isContractRegistered(
      contractAddress: string
    ): NonPayableTransactionObject<boolean>;

    getRegisteredContracts(
      party: string
    ): NonPayableTransactionObject<string[]>;

    getAllRegisteredContracts(): NonPayableTransactionObject<string[]>;

    isPartyMemberOfContract(
      party: string,
      contractAddress: string
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    AddedSharedMember(cb?: Callback<AddedSharedMember>): EventEmitter;
    AddedSharedMember(
      options?: EventOptions,
      cb?: Callback<AddedSharedMember>
    ): EventEmitter;

    NewContractRegistered(cb?: Callback<NewContractRegistered>): EventEmitter;
    NewContractRegistered(
      options?: EventOptions,
      cb?: Callback<NewContractRegistered>
    ): EventEmitter;

    PartyAdded(cb?: Callback<PartyAdded>): EventEmitter;
    PartyAdded(options?: EventOptions, cb?: Callback<PartyAdded>): EventEmitter;

    PartyRemoved(cb?: Callback<PartyRemoved>): EventEmitter;
    PartyRemoved(
      options?: EventOptions,
      cb?: Callback<PartyRemoved>
    ): EventEmitter;

    RemovedSharedMember(cb?: Callback<RemovedSharedMember>): EventEmitter;
    RemovedSharedMember(
      options?: EventOptions,
      cb?: Callback<RemovedSharedMember>
    ): EventEmitter;

    ResetExclusiveMember(cb?: Callback<ResetExclusiveMember>): EventEmitter;
    ResetExclusiveMember(
      options?: EventOptions,
      cb?: Callback<ResetExclusiveMember>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddedSharedMember", cb: Callback<AddedSharedMember>): void;
  once(
    event: "AddedSharedMember",
    options: EventOptions,
    cb: Callback<AddedSharedMember>
  ): void;

  once(
    event: "NewContractRegistered",
    cb: Callback<NewContractRegistered>
  ): void;
  once(
    event: "NewContractRegistered",
    options: EventOptions,
    cb: Callback<NewContractRegistered>
  ): void;

  once(event: "PartyAdded", cb: Callback<PartyAdded>): void;
  once(
    event: "PartyAdded",
    options: EventOptions,
    cb: Callback<PartyAdded>
  ): void;

  once(event: "PartyRemoved", cb: Callback<PartyRemoved>): void;
  once(
    event: "PartyRemoved",
    options: EventOptions,
    cb: Callback<PartyRemoved>
  ): void;

  once(event: "RemovedSharedMember", cb: Callback<RemovedSharedMember>): void;
  once(
    event: "RemovedSharedMember",
    options: EventOptions,
    cb: Callback<RemovedSharedMember>
  ): void;

  once(event: "ResetExclusiveMember", cb: Callback<ResetExclusiveMember>): void;
  once(
    event: "ResetExclusiveMember",
    options: EventOptions,
    cb: Callback<ResetExclusiveMember>
  ): void;
}
