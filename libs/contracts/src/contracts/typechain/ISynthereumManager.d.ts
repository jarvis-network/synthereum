/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ISynthereumManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ISynthereumManager;
  clone(): ISynthereumManager;
  methods: {
    /**
     * Allow to add roles in derivatives and synthetic tokens contracts
     * @param accounts Addresses to which give the grant
     * @param contracts Derivatives or Synthetic role contracts
     * @param roles Roles id
     */
    grantSynthereumRole(
      contracts: string[],
      roles: (string | number[])[],
      accounts: string[]
    ): NonPayableTransactionObject<void>;

    /**
     * Allow to revoke roles in derivatives and synthetic tokens contracts
     * @param accounts Addresses to which revoke the grant
     * @param contracts Derivatives or Synthetic role contracts
     * @param roles Roles id
     */
    revokeSynthereumRole(
      contracts: string[],
      roles: (string | number[])[],
      accounts: string[]
    ): NonPayableTransactionObject<void>;

    /**
     * Allow to renounce roles in derivatives and synthetic tokens contracts
     * @param contracts Derivatives or Synthetic role contracts
     * @param roles Roles id
     */
    renounceSynthereumRole(
      contracts: string[],
      roles: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    /**
     * Allow to call emergency shutdown in derivative contracts
     * @param derivatives Derivate contracts to shutdown
     */
    emergencyShutdown(derivatives: string[]): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
